mem/1e+09
object.size(NRF)/1e+09
object.size(SC)/1e+09
library(bigalgebra)
?dgesdd
load("C:/Academics/Post-doc/Va_simulations/5_History_sim/c_Output/Output_temp.RData")
C0 = c_ind/2
nR = NRF
nind = 1000
nsnps = ncol(C0)
Ne_factor = 1
L<-cov(C0)*(nind-1)/(nind)
rm(c_ind)
rm(NRF)
dim(NRF)
pbar0<-colMeans(C0)
ngen1 = 1
ngen2 = 4
C0=scale(sqrt(1/nind)*C0, scale=FALSE)
D = matrix(0,nrow=min(nsnps, nind), ncol=1)
U = matrix(0,nrow=nsnps,ncol=min(nsnps, nind))
VT = matrix(0,nrow=min(nsnps, nind),ncol=nind)
dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
library(bigalgebra)
dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
rm("VT")
DL<-D
UL<-U
M<-Reduce('+', sapply(1+ngen1:(ngen2-ngen1), function(x){((1-1/(2*nind*Ne_factor))^(x-1))*(1/(nind*Ne_factor))*nR^x}, simplify=FALSE))
A = t(U)%*%(L*M)%*%U
dim(U)
WR= matrix(0,nrow=nrow(A),ncol=1) # real part of eigenvalues
WI= matrix(0,nrow=nrow(A),ncol=1) # complex part of eigenvalues
VR = matrix(0,ncol=nrow(A),nrow=nrow(A))# Right eigenvectors
VL = matrix(0,ncol=nrow(A),nrow=nrow(A))# Left eigenvectors
dim(VR)
dim(D)
dim(U)
dgeev(A=A,WR=WR,WI=WI,VR=VR, VL=VL)
dim(VR)
dim(D)
U = U%*%VR
D = sqrt(WR)
dim(D)
dim(U)
rm("M")
rm(list = c("A", "WR", "WI", "VL"))
projp<-U%*%diag(D^(-pa))
pa
dim(diag(D^(-pa))
)
dim((D^(-pa))
)
a = c(1,2,3)
dim(a)
a = matrix(a, nrow = 3, ncol = 1)
a
diag(a)
dim(DL)
a
c(a)
D = c(sqrt(WR))
a = c(1,2,3)
c(a)
dim(D)
D = c(D)
dim(D)
projp<-U%*%diag(D^(-pa))
rm(list = c("U", "D"))
library(bigalgebra)
?dgesdd
C0 = matrix(rnorm(24),4, 6)
ncol_A = nrow(C0)
nrow_A = ncol(C0)
D = matrix(0,nrow=ncol_A, ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
C0
C0 = matrix(rnorm(24),6, 4)
ncol_A = nrow(C0)
nrow_A = ncol(C0)
D = matrix(0,nrow=ncol_A, ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
C0 = matrix(rnorm(24),6, 4)
ncol_A = nrow(C0)
nrow_A = ncol(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = t(C0), S = D, U = U, VT = VT)
U
D
VT
C0 = matrix(rnorm(24),6, 4)
ncol_A = nrow(C0)
nrow_A = ncol(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
bigalgebra::dgesdd(JOBZ = "O", A = t(C0), S = D, U = U, VT = VT)
bigalgebra::dgesdd(JOBZ = "N", A = t(C0), S = D, U = U, VT = VT)
bigalgebra::dgesdd(JOBZ = "S", A = t(C0), S = D, U = U, VT = VT)
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
VT
U
C0 = matrix(rnorm(24),6, 4)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "S", A = C0, S = D, U = U, VT = VT)
C0 = matrix(rnorm(24),4, 6)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "S", A = C0, S = D, U = U, VT = VT)
C0
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
D
U = matrix(0,nrow=nrow_A,ncol=min(nrow_A, ncol_A))
VT = matrix(0,nrow=min(nrow_A, ncol_A),ncol=ncol_A)
U
VT
C0 = matrix(rnorm(24),4, 6)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol=ncol_A)
U
VT
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
C0 = matrix(rnorm(24),6, 4)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
C0 = matrix(rnorm(24),6, 4)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol=ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
D
U
VT
C0 = matrix(rnorm(24),4, 6)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
svdC = svd(C0)
svdC$u
U = matrix(0,nrow_A,nrow_A)
C0 = matrix(rnorm(24),6, 4)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
svdC = svd(C0)
U = matrix(0,nrow_A,nrow_A)
C0 = matrix(rnorm(24),6, 4)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
svdC = svd(C0)
svdC$u
svdC$v
svdC$d
U
svdC$u
D
svdC$d
svdC$u
U
C0 = matrix(rnorm(25),5, 5)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
U
VT
D
svdC = svd(C0)
svdC$u
U
D
svdC$d
?svd
??mat.mult
?matrix
?Matrix::Matrix
load("C:/Academics/Post-doc/Va_simulations/5_History_sim/c_Output/Output_temp.RData")
library(Matrix)
dim(L)
L = cov(c_ind)
dim(L)
object.size(L)/1e+09
L1 - Matrix(L, sparse = TRUE)
L1 = Matrix(L, sparse = TRUE)
object.size(L1)/1e+09
t(list_alpha)%*%L%*%list_alpha
t(list_alpha)%*%L1%*%list_alpha
t(list_alpha)%*%L%*%list_alpha
t(list_alpha)%*%L1%*%list_alpha
dim(NRF)
sum(NRF!=0)
252237924/(15882^2)
NRF[1,10000]
NRF[1,1]
NRF[1,2]
L[1,2]
L[1,2000]
L[1,10000]
d = read.csv()
d = read.csv(file.choose(), header=T)
unique(d$Trait)
unique(d$Family)
order(unique(d$Family))
length(unique(d$Family))
which(d$Family==200)
which(d$Family==48)
which(d$Family==1)
which(d$Family==47)
d$Trait[which(d$Family==47)]
d$Trait[which(d$Family>43)]
d$Trait[which(d$Family==0)]
d$Trait[which(d$Family==202)]
d$Trait[which(d$Family==202)]
which(d$Family==202)]
which(d$Family==202)
which(d$Family==0)
which(d$Family==0|d$Family>43)
which(d$Family==0|d$Family>43) + 1
vA_true = c(0.01129211, 0.01906948, 0.03519948, 0.03921755, 0.03812806, 0.06097343)
vA_est = c(0.001420423, 0.010398161, 0.020220730, 0.016588259, 0.023837300, 0.045073819)
plot(vA_est~vA_true)
abline(0,1)
load("C:/Academics/Post-doc/Va_simulations/5_History_sim/c_Output/Output_temp.RData")
dim(L)
dim(c_ind)
ret = sample(1:ncol(c_ind), 5000)
ret[1:4]
c_ind = c_ind[, ret]
dim(c_ind)
list_alpha = list_alpha[ret]
L = cov(c_ind/2)
vA = t(list_alpha)%*%L%*%list_alpha
vA
fem_loci = sample(1:5000, 2500)
a = rep(0, 5000)
a[500]
a[fem_loci] = 1
a
a_fem = a
a_male = ifelse(a==1, 0, 1)
plot(a_male~a_fem)
list_alpha_male = list_alpha*a_male
list_alpha_fem = list_alpha*a_fem
vA_male = t(list_alpha_male)%*%L%*%list_alpha_male
vA_fem = t(list_alpha_fem)%*%L%*%list_alpha_fem
vA_male
vA_fem
cov_mf = t(list_alpha_male)%*%L%*%list_alpha_fem
cov_mf
cov_mf/sqrt(vA_male*vA_fem)
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = c(1.4, 0.14, 0.014, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4)
param_matrix
param_matrix[,2] = rep(1000, 9)
param_matrix
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1,4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1.4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix
param_matrix = rbind(param_matrix, param_matrix)
param_matrix
bdelta = c(rep("fixed", 9), rep("estimate", 9))
bdelta
pmatrix = cbind(bdelta, pmatrix)
pmatrix = cbind(bdelta, param_matrix)
param_matrix = cbind(bdelta, param_matrix)
param_matrix
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1.4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix = rbind(param_matrix, param_matrix)
param_matrix = cbind(c(rep("fixed", 9), rep("estimate", 9)), param_matrix)
param_matrix
?save
getwd()
write.table(param_matrix, file = "param.txt", sep = " ")
write.table(param_matrix, file = "param.txt", sep = " ", col.names = FALSE, row.names = FALSE)
d = read.csv(file.choose(), header=T)
head(d)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
hist(d$pdelta_est)
hist(d$pdelta_est, breaks = 50)
a = c(1,2,3,4)
a
collapse(a)
paste(a[1], a[2], a[3], sep = "_")
### Base path and path to Vw.Rmd (file containing Jarrod's functions) (depending on the system) ###
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/Va_simulations/5_History_sim"
Vw_path = "/ceph/users/marun/Va_simulations/6_Code_Test/Vw.Rmd"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/5_History_sim" ## ON VERA
Vw_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/6_Code_Test/Vw.Rmd"  ### Jarrod's functions and other code is stored here
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local Wsl
Vw_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}else{
base_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local windows
Vw_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}
}
}
# Paths to various scripts that are used for running the simulations and extracting information from SLiM outputs
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_History.slim")                                                    ## SLiM script running the history
msprime_add_neutral_path = file.path(base_path, "1_History_add_neutral_mut.py")                               ## msprime script that adds neutral mutations to the tree sequence generated by 1_History.slim
slim_expt_path = file.path(base_path, "4_Experiment.slim")                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
# Paths to various temporary directories
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
###################################
###### Create file structure ######
###################################
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
#system(paste("rm -rf", paste(base_path, "/b_Interim_files/*", sep = ""))) # Remove the contents of this directory
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
##### Create a spreadsheet to store cumulative data across all simulations (only if it doesn't exist already)
# Assign a "Set_ID" to each set of simulations
# The set ID is the name of the system + time at which this script starts running. It stays constant throughout (for all the simulations run in that particular set).
Set_ID = as.character(paste(Sys.info()["nodename"], Sys.time()))
Set_ID = gsub(" ", "_", Set_ID)
Set_ID = paste(Set_ID, commandArgs(trailingOnly = TRUE)[1], commandArgs(trailingOnly = TRUE)[2], commandArgs(trailingOnly = TRUE)[3], commandArgs(trailingOnly = TRUE)[4], commandArgs(trailingOnly = TRUE)[5], sep = "_")
paste("rm ", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = ""
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
sim = 1
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = " "
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep =""), sep = " ")
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Sex_specific_sel" ## ON VERA
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Academics/Post-doc/Sex_specific_sel" ## Local Wsl
}else{
base_path = "C:/Academics/Post-doc/Sex_specific_sel" ## Local windows
}
}
}
base_path
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_FWD_sim.slim")                                                    ## SLiM script running the history                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
setwd("~/GitHub/Va_simulations/RESULTS and ANALYSES/No_burnin")
library(ggplot2)
d = read.csv("Data_no_burnin.csv", header=T)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_f = d[d$bdelta_method=="fixed",]
d_e = d[d$bdelta_method=="estimate",]
d_f_std = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$n_cages=="10"&d_f$r_expt==1.4e-06,]
p_f_std = ggplot(d_f_std, aes(y = vA_est, x = vA_true))
p_f_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_e_std = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_std = ggplot(d_e_std, aes(y = vA_est, x = vA_true))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_f_r = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$n_cages=="10",]
p_f_r = ggplot(d_f_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_f_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_f_ind = d_f[d_f$ngen_expt=="3"&d_f$n_cages=="10"&d_f$r_expt==1.4e-06,]
p_f_ind = ggplot(d_f_ind, aes(y = vA_est, x = vA_true, color = n_ind_exp))
p_f_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_f_cage = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$r_expt==1.4e-06,]
p_f_cage = ggplot(d_f_cage, aes(y = vA_est, x = vA_true, color = n_cages))
p_f_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_f_gen = d_f[d_f$n_ind_exp=="1000"&d_f$n_cages=="10"&d_f$r_expt==1.4e-06,]
p_f_gen = ggplot(d_f_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_f_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_r = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10",]
p_e_r = ggplot(d_e_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_e_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_ind = d_e[d_e$ngen_expt=="3"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_ind = ggplot(d_e_ind, aes(y = vA_est, x = vA_true, color = n_ind_exp))
p_e_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_cage = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$r_expt==1.4e-06,]
p_e_cage = ggplot(d_e_cage, aes(y = vA_est, x = vA_true, color = n_cages))
p_e_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_f_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_f_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_e_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_gen = d_e[d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_gen = ggplot(d_e_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_e_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_e_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_f_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
p_f_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_e_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_e_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_e_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_gen = d_e[d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_gen = ggplot(d_e_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_e_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d = read.csv(file.choose())
plot(d$vA_est ~ d$vA_true, xlim = c(0.05, 0.1))
d$vA_est
plot(d$vA_est ~ d$vA_true, xlim = c(0.01, 0.1))
abline(0, 1)
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.1), xlim = c(0.005, 0.1))
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.1), ylim = c(0.005, 0.1))
abline(0, 1)
d = read.csv(file.choose())
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.1), ylim = c(0.005, 0.1))
abline(0, 1)
