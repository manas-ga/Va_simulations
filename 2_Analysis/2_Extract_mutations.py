#############################################################################
############ Details of the function ########################################
#############################################################################

## Requirements
# numpy

## Input variables:
# 1. The path (including filename) of the text file containing the full output generated by the SLiM simulation
# 2. The path (including filename) where the text file containing mutations is to be stored


## What does the function do?
# Reads the full output generated by the SLiM simulation
# Identifies the positions of the section of the full SLiM output containing the details of segregating mutations in the population.
# Saves the details of segregating mutations in a new text file.


## Output
# A text file of all mutations and their information ("mutations.txt")

## Currently only works for autosomes


import numpy as np
import sys



def extract_mutations(slim_output_path, # Path of the .txt file containing the SLiM output
                      mutations_path):  # Path of the .txt output file containing mutations

    
    #### Picking out mutations
    # Create an empty file to write the mutations in
    f_mutation = open(mutations_path, "w")
    # sys.arg are by default strings. The int(float(sys.argv[5])) is meant to take care of this.
    # Just int(sts.argv[5]) does not work for scientific notation (eg 1e+05)

    # Create dicts that will be filled with line numbers and the corresponding text on those lines
    dict_1m = {}
    dict_2m = {}

    for i_m, line_m in enumerate(open(slim_output_path)):
        dict_1m[line_m.rstrip()] = i_m
        dict_2m[i_m] = line_m

    # Identify start and end points of the section showing mutations
    start_m = dict_1m["Mutations:"]
    end_m = dict_1m["Individuals:"]

    n_mutations = 0

    # Write headers 
    f_mutation.write("Temp_ID Permanent_ID Mutation_type Position s h Subpop Tick Number\n")
    for j_m in range(start_m + 1,end_m):
       f_mutation.write(dict_2m[j_m])
       n_mutations = n_mutations + 1

    f_mutation.close()

###########################################################################################################################

# Extract mutations based on command line arguments

extract_mutations(slim_output_path = sys.argv[1],
                      mutations_path = sys.argv[2])

 
