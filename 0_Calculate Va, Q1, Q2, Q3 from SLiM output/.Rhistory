w[k] = w[k] +  ((2-c)*h + (c-1)/2)*c*s
}
if (k%%100==0){
print(k)}
}
w[10000]
w[1]
var(w)
var(w)/((mean(w)^2))
w_rel = w/mean(w)
var(w_rel)
mean(w)
w_rel[1]
w_rel[100]
w_rel[1000]
w = rep(0, n_individuals)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites){
c = c_ind[k,m]
s = mutations$s[which(mutations$Temp_ID == m-1)]
h = mutations$h[which(mutations$Temp_ID == m-1)]
w[k] = w[k] + 1 + ((2-c)*h + (c-1)/2)*c*s
}
if (k%%100==0){
print(k)}
}
w_rel = w/mean(w)
var(w_rel)
hist(w)
hist(w, breaks = 20)
mean(c_ind[1])
mean(c_ind[,1])
mutations$Freaquency = mutations$Number/20000
mutations$Frequency = mutations$Number/20000
mean(c_ind[,1])/2 - mutations$Frequency[which(mutations$Temp_ID==0)]
for (z in 1:n_sites){}
for (z in 1:n_sites){mean(c_ind[,z])/2 - mutations$Frequency[which(mutations$Temp_ID==z-1)]}
for (z in 1:n_sites){print(mean(c_ind[,z])/2 - mutations$Frequency[which(mutations$Temp_ID==z-1)])}
for (z in 1:n_sites){plot(mean(c_ind[,z])/2 , mutations$Frequency[which(mutations$Temp_ID==z-1)])}
mean(c_ind[1])
mean(c_ind[,1])
fot (i in 1:n_sites){}
x1 = c()
x2 = c()
for (i in 1:n_sites){x1[i] = mean(c_ind[,i])}
for (i in 1:n_sites){x2[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)])}}
for (i in 1:n_sites){x2[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)])}
for (i in 1:n_sites){x2[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]}
plot(x1, x2)
plot(x1/2, x2)
abline()
abline(0,1)
labels = 0:n_sites-1
labels = 0:(n_sites-1)
labels = 0:(n_sites-1)
c_new = data.frame(c_ind, colnames = labels)
c_new = data.frame(,c_ind, colnames = labels)
names(c_new) = labels
c_new = c_ind
names(c_new) = labels
View(c_new)
c_new$Fitness = w/mean(w)
View(c_new)
fit_1 = lm(w/mean(w) ~ ., data = c_ind)
summary(fit_1)
list_s = ()
list_s = c()
list_alpha = ()
list_alpha = coef(fit_1)
list_alpha = coef(fit_1)[-1]
for (i in 1:n_sites){list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]}
list_s = c()
for (i in 1:n_sites){list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]}
plot(list_s, list_alpha/2)
plot(list_s, list_alpha)
list_alpha[100]
fit_1 = lm(w ~ ., data = c_ind)
summary(fit_1)
list_alpha = coef(fit_1)[-1]
list_s = c()
for (i in 1:n_sites){list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]}
plot(list_s, list_alpha)
plot(list_s, list_alpha/2)
abline(0,1)
plot(list_s/2, list_alpha)
abline(0,1)
mutations$Diversity = 2*(mutations$Frequency)*(1-mutations$Frequency)
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
list_freq = mutations$Frequency[which(mutations$Temp_ID==i-1)]
}
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
list_freq[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
}
plot(log(list_alpha^2), log(list_freq))
plot(log(list_alpha), log(list_freq))
plot(log(list_alpha), log(list_freq))
log(list_alpha)
list_alpha
list_alpha[1]
log(list_alpha[1])
log(list_alpha[2,1])
log(list_alpha[1,2])
for (i in 1:n_sites){
list_alpha[i] = coef(fit_1)[i+1]
}
plot(log(list_alpha), log(list_freq))
plot(log(list_alpha*list_alpha), log(list_freq))
plot(log(list_freq), log(list_alpha*list_alpha))
list_freq[1]
fit_2 = lm(log(list_freq) ~ log(list_alpha*list_alpha))
summary(fit_2)
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
lm(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
lm(log(2*list_freq*(1-list_freq))~ log(list_alpha*list_alpha))
lm(log(s*s)~log(Diversity), mutations)
plot(log(mutations$s*mutations$s), log(mutations$Diversity))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(list_alpha*list_alpha, log(2*list_freq*(1-list_freq))))
plot(log(list_alpha*list_alpha), log(2*list_freq*(1-list_freq)))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(list_alpha*list_alpha), log(2*list_freq*(1-list_freq)))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
lm(log(2*list_freq*(1-list_freq))~ log(list_alpha*list_alpha))
lm(log(list_freq)~ log(list_alpha*list_alpha))
plot((2*list_freq*(1-list_freq)), (list_alpha*list_alpha))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
#list_freq[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[i])/2
}
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
#list_freq[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
}
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
}
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
}
plot(list_freq, list_freq1)
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
lm(log(log(list_alpha*list_alpha)~2*list_freq*(1-list_freq)))
lm(log(list_alpha*list_alpha)~log(2*list_freq*(1-list_freq)))
lm(log(mutations$s*mutations$s)~log(mutations$Diversity))
plot(list_s/2, list_alpha)
L = cov(c_ind)
va = t(list_alpha)%*%L%*%list_alpha
va
va = list_alpha%*%L%*%t(list_alpha)
View(L)
va = t(list_alpha)%*%L
va
list_alpha
(list_alpha)%*%t(list_alpha)
t(list_alpha)%*%(list_alpha)
list_alpha + 1
t(list_alpha)%*%(list_alpha)
list_alpha = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
t(list_alpha)%*%(list_alpha)
t(list_alpha)%*%L
list_alpha
t(list_alpha)%*%(list_alpha)
a = c(1, 0, 0)
a
t(a)%*%a
plot(list_s/2, list_alpha)
plot(list_freq, list_freq1)
plot(list_s/2, list_alpha)
which(abs(L)==1,arr.ind = T)
max(abs(L))
range(eigen(L)$values)
sum(eigen(L)$values<10e-16)
v->which(eigen(L)$values<10e-16)
v<-which(eigen(L)$values<10e-16)
V<-eigen(L)$vectors[,v]
which(abs(V[,1])>10e-16)
which(abs(V[,1])>10e-14)
which(abs(V[,1])>10e-12)
m1 <- which(abs(V[,1])>10e-12)
m2 <- which(abs(V[,2])>10e-12)
m2
plot(list_s[-m1]/2, list_alpha[-m1])
sum(list_s[m1]/2)
list_alpha[m1]
-0.003053459 + -0.037176823
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
va
m2
m1
plot(list_s/2, list_alpha)
# Read genomes
c_genome = read.csv("c_matrix.csv", header=F)
#Convert genome data into individual data (rows are individuals and columns are allele counts {0,1 or 2} at various sites). Note that genome 1 and genome 2 are from individual 1, and so on
c_ind = data.frame()
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
for (i in 1:n_individuals){
for (j in 1:ncol(c_genome)){
c_ind[i,j] = c_genome[2*i,j] + c_genome[2*i - 1,j]
}
if (i%%100==0){
print(i)
}
}
L = cov(c_ind)
mutations = read.table("mutations.txt", header=T, sep = " ")
mutations$Frequency = mutations$Number/20000
mutations$Diversity = 2*(mutations$Frequency)*(1-mutations$Frequency)
w = rep(0, n_individuals)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites){
c = c_ind[k,m]
s = mutations$s[which(mutations$Temp_ID == m-1)]
h = mutations$h[which(mutations$Temp_ID == m-1)]
w[k] = w[k] + 1 + ((2-c)*h + (c-1)/2)*c*s
}
if (k%%100==0){
print(k)}
}
labels = 0:(n_sites-1)
c_new = c_ind
names(c_new) = labels
c_new$Fitness = w/mean(w)
fit_1 = lm(w ~ ., data = c_ind)
summary(fit_1)
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
print(va)
plot(list_s/2, list_alpha)
plot(list_freq, list_freq1)
plot(list_s/2, list_alpha)
plot(list_freq, list_freq1)
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
lm(log(list_alpha*list_alpha)~log(2*list_freq*(1-list_freq)))
lm(log(mutations$s*mutations$s)~log(mutations$Diversity))
lm(log(list_alpha*list_alpha)~log(2*list_freq*(1-list_freq)))
plot(list_s/2, list_alpha)
list_alpha
# Read genomes
c_genome = read.csv("c_matrix.csv", header=F)
#Convert genome data into individual data (rows are individuals and columns are allele counts {0,1 or 2} at various sites). Note that genome 1 and genome 2 are from individual 1, and so on
c_ind = data.frame()
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
for (i in 1:n_individuals){
for (j in 1:ncol(c_genome)){
c_ind[i,j] = c_genome[2*i,j] + c_genome[2*i - 1,j]
}
if (i%%100==0){
print(i)
}
}
L = cov(c_ind)
mutations = read.table("mutations.txt", header=T, sep = " ")
mutations$Frequency = mutations$Number/20000
mutations$Diversity = 2*(mutations$Frequency)*(1-mutations$Frequency)
w = rep(0, n_individuals)
w
View(mutations)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites){
c = c_ind[k,m]
s = mutations$s[which(mutations$Temp_ID == m-1)]
h = mutations$h[which(mutations$Temp_ID == m-1)]
w[k] = w[k] + 1 + ((2-c)*h + (c-1)/2)*c*s
}
if (k%%100==0){
print(k)}
}
n_sites
w
labels = 0:(n_sites-1)
c_new = c_ind
names(c_new) = labels
c_new$Fitness = w/mean(w)
fit_1 = lm(w ~ ., data = c_ind)
summary(fit_1)
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
print(va)
plot(list_s/2, list_alpha)
plot(list_freq, list_freq1)
plot(list_s/2, list_alpha)
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
plot(list_s/2, list_alpha)
plot(list_freq, list_freq1)
plot(list_s/2, list_alpha)
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
plot(list_s/2, list_alpha)
min(list_s)
which(min(list_s))
which(list_s == -0.4059401)
list_s
hist(list_s/2)
hist(list_alpha)
fit_1 = lm(w ~ ., data = c_ind)
summary(fit_1)
fit_1 = lm(c_new$Fitness ~ ., data = c_ind)
summary(fit_1)
hisy(coef(fit_1)[-1])
hist(coef(fit_1)[-1])
hist(list_alpha)
hist(coef(fit_1)[-1])
list_alpha
list_alpha = c()
list_alpha
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
list_alpha
va = t(list_alpha[is.na(list_alpha)]<-0)%*%L%*%list_alpha[is.na(list_alpha)]<-0
L = cov(c_ind)
len(list_alpha[is.na(list_alpha))
length(list_alpha[is.na(list_alpha))
length(list_alpha[is.na(list_alpha)]<-0)
plot(list_s/2, list_alpha)
list_alpha
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_1)[-1][i]
}
lisy_alpha
list_alpha
plot(list_s/2, list_alpha)
plot(list_s, list_alpha)
View(mutations)
min(list_s)
hist(list_alpha)
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
print(va)
plot(list_s, list_alpha)
list_alpha[list_alpha>0]
plot(list_freq, list_freq1)
plot(log(mutations$Diversity), log(mutations$s*mutations$s))
lm(log(list_alpha*list_alpha)~log(2*list_freq*(1-list_freq)))
plot(log(2*list_freq*(1-list_freq)), log(list_alpha*list_alpha))
hist(list_alpha)
hist(w)
summary(fit_1)
fit_1 = lm(c_new$Fitness ~ ., data = c_ind)
summary(fit_1)
fit_2 <- lm(w ~ ., data = c_ind)
summary(fit_1)
summary(fit_2)
plot(coef(fit_1), coef(fit_2))
plot(coef(fit_1)[-1], coef(fit_2)[-1])
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_2)[-1][i]
}
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
print(va)
hist(coef(fit_2)[-1])
cov(coef(fit_2)[-1]*coef(fit_2)[-1], mutations*Diversity)
# Read genomes
c_genome = read.csv("c_matrix.csv", header=F)
#Convert genome data into individual data (rows are individuals and columns are allele counts {0,1 or 2} at various sites). Note that genome 1 and genome 2 are from individual 1, and so on
c_ind = data.frame()
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
for (i in 1:n_individuals){
for (j in 1:ncol(c_genome)){
c_ind[i,j] = c_genome[2*i,j] + c_genome[2*i - 1,j]
}
if (i%%100==0){
print(i)
}
}
L = cov(c_ind)
mutations = read.table("mutations.txt", header=T, sep = " ")
mutations$Frequency = mutations$Number/20000
mutations$Diversity = 2*(mutations$Frequency)*(1-mutations$Frequency)
w = rep(0, n_individuals)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites){
c = c_ind[k,m]
s = mutations$s[which(mutations$Temp_ID == m-1)]
h = mutations$h[which(mutations$Temp_ID == m-1)]
w[k] = w[k] + 1 + ((2-c)*h + (c-1)/2)*c*s
}
if (k%%100==0){
print(k)}
}
labels = 0:(n_sites-1)
c_new = c_ind
names(c_new) = labels
c_new$Fitness = w/mean(w)
fit_1 <- lm(c_new$Fitness ~ ., data = c_ind)
fit_2 <- lm(w ~ ., data = c_ind)
summary(fit_1)
summary(fit_2)
list_alpha = c()
list_s = c()
list_freq = c()
list_freq1 = c()
for (i in 1:n_sites){
# Make a list of selection coefficients
list_s[i] = mutations$s[which(mutations$Temp_ID==i-1)]
# Calculate frequencies in two different ways
list_freq1[i] = mutations$Frequency[which(mutations$Temp_ID==i-1)]
list_freq[i] = mean(c_ind[,i])/2
# List alphas
list_alpha[i] = coef(fit_2)[-1][i]
}
list_alpha[is.na(list_alpha)]<-0
va = t(list_alpha)%*%L%*%list_alpha
print(va)
plot(list_s, list_alpha)
plot(list_freq, list_freq1)
cov(list_freq, coef(fit_2)[-1]*coef(fit_2)[-1])
list_alpha[is.na(list_alpha)]<-0
cov(list_freq, coef(fit_2)[-1]*coef(fit_2)[-1])
