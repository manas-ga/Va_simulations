theme(plot.title = element_text(hjust = 0.5))
p_ad_fec
library(lmerTest)
library(car)
library(ggplot2)
library(coxme)
library(emmeans)
run_anova = FALSE # If true, also prints outputs of mixed model ANOVAs fro dev time and their diagnostics
# Labels for Pre.treatment and Time
Pre.treatment_labs = c("No Pre-treatment", "Pre-treatment")
names(Pre.treatment_labs) = c("N", "Y")
Time_labs = c("0 hours", "24 hours")
names(Time_labs) = c("0", "24")
p_ad_fec = ggplot(d_ad_fec, aes(y=Fecundity, fill = Selection, x = Treatment)) +
geom_boxplot() +
theme_bw() +
facet_grid(Time~Pre.treatment, labeller = labeller(Time = Time_labs, Pre.treatment = Pre.treatment_labs)) +
labs(y = "Fecundity", title = "0 hours post treatment") +
theme(plot.title = element_text(hjust = 0.5))
p_ad_fec
# Plot data
p_egg_dt = ggplot(d_egg_dt_vialmeans, aes(y = Hours, fill = Selection, x = Treatment)) +
geom_boxplot() +
theme_bw() +
facet_grid(Sex~Pre.treatment, labeller = labeller(Pre.treatment = Pre.treatment_labs)) +
labs(y = "Development time (hours)") +  theme(text = element_text(size = 15))
p_egg_dt
knitr::opts_chunk$set(echo = FALSE)
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_ml = cbind(d_7, d_6_std)
View(d_7)
View(d_6_std)
View(d_7)
d_7_ml = rbind(d_7, d_6_std)
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
p = make_std_plots(d_7[d_7$sequence_length*d_7$r_msp==0.5,])
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
p = make_std_plots(d_7[d_7$sequence_length*d_7$r_msp==0.5,])
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
dim(d_8)
p_b_large_std = make_std_plots(d_8)
p_b_large_std
plot(d_8$Residual_var)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
p_b_large_std
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
unique
unique(d_8$end_gen)
unique(d_8$r)
unique(d_8$r_expt)
unique(d_8$sequence_length*d_8$r_expt)
unique(d_8$sequence_length*d_8$r)
library(ggplot2)
library(cowplot)
library(latex2exp)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
p_nb_0.1_std = make_std_plots(d_0)
d_0 = read.csv("../combined_data/Set_0_output.csv") # Data for the standard set
d_2 = read.csv("../combined_data/Set_2_output.csv") # Varying r_expt, n_ind_exp, n_cages, ngen2
d_nb_0.1  = rbind(d_0, d_2)
##################################################################################################
####### Standard plots (Set_0: ml_expt = 0.1, n_indxpt = 1000, n_cages = 10, ngen2 = 4) ##########
##################################################################################################
p_nb_0.1_std = make_std_plots(d_0)
ggsave(p_nb_0.1_std$combined, width = 8, height = 8, file = "p_nb_0.1_std.jpg")
p_nb_0.1_std$combined
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
p_b_large_std$combined
range(d_8$seg_sites)
range(d_8$seg_sites_neu)
range(d_8$seg_sites - d_8$seg_sites_neu)
range(d_8$sequence_length*d_8$r)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml.jpg")
p_b_large_std$combined
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_std = d_7[d_7$r==5e-7,]
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_std = d_7[d_7$r==5e-7,]
p_b_0.5_2_std = make_std_plots(d_7_std)
ggsave(p_b_0.5_2_std$combined, width = 8, height = 8, file = "p_b_0.5_2_std.jpg")
p_b_0.5_2_std$combined
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_W$)"), y = TeX(r"(Estimate of $V_W$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_9 = read.csv("../combined_data/Set_9_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_9)
ggsave(plot = p_b_large_std$main, width = 5, height = 5, file = "talk_burnin_del.jpg")
d_5 = read.csv("../combined_data/Set_5_output.csv")
d_5_std = d_5[d_5$r_expt*d_5$sequence_length==2&d_5$n_ind_exp==1000&d_5$n_cages==10&d_5$ngen2==4,] # Data for the standard set
p_nb_2_std = make_std_plots(d_5_std)
ggsave(p_nb_2_std$main, width = 5, height = 5, file = "talk_noburnin.jpg")
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_9 = read.csv("../combined_data/Set_9_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_9)
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml.jpg")
p_b_large_std$combined
ggsave(plot = p_b_large_std$main, width = 5, height = 5, file = "talk_burnin_del.jpg")
d_11 = read.csv("../combined_data/Set_11_output.csv") # Data for the standard set
setwd("~/GitHub/Va_simulations/4_analysed_data/plots")
d_11 = read.csv("../combined_data/Set_11_output.csv") # Data for the standard set
p_b_large_ben_std = make_std_plots(d_11)
ggsave(plot = p_b_large_ben_std$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ben.jpg")
