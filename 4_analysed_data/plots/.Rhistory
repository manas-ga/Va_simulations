theme(text = element_text(size = 15)) +
theme(legend.position = "bottom")
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 8, height = 12, file = "manuscript_figures/FigS3.jpg")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at each locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom")
plot_finescale_relative_va_lost
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at each locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom")
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom")
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("Min." = "blue", "Max." = "red"),
labels = c("Min." = TeX(r"((Min. $V_a$ lost))"), "Max." = TeX(r"((Max. $V_a$ lost))"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(labels = c("Min." = TeX(r"(Min. $V_a$ lost)"), "Max." = TeX(r"(Max. $V_a$ lost)"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Min." = "blue", "Max." = "red"),
labels = c("Min." = TeX(r"((Min. $V_a$ lost))"), "Max." = TeX(r"((Max. $V_a$ lost))"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Min." = "#0072B2", "Max." = "#D01C8B"),
labels = c("Min." = TeX(r"(Min. $V_a$ lost)"), "Max." = TeX(r"(Max. $V_a$ lost)"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"(($V_a$ lost at a locus) / (Total $V_a(0)$))"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Min." = "#00BFC4", "Max." = "#F8766D"),
labels = c("Min." = TeX(r"(Min. $V_a$ lost)"), "Max." = TeX(r"(Max. $V_a$ lost)"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"($V_a$ lost at a locus / Total $V_a(0)$)"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Min." = "#00BFC4", "Max." = "#F8766D"),
labels = c("Min." = TeX(r"(Min. $V_a$ lost)"), "Max." = TeX(r"(Max. $V_a$ lost)"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS3.jpg")
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
library(ggplot2)
library(cowplot)
library(latex2exp)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
mu_alpha = (data$shape)*(data$shape)
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M, scale = ", data$scale, sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_std = d_7[d_7$r==5e-7,]
p_b_0.5_2_std = make_std_plots(d_7_std)
ggsave(p_b_0.5_2_std$combined, width = 8, height = 8, file = "p_b_0.5_2_std.jpg")
p_b_0.5_2_std$combined
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length \nin burnin (M)") +
scale_color_manual(values = c("#D01C8B", "#0072B2", "#999999")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = paste("scale = ", unique(d_7_ml$scale), sep = ""))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "manuscript_figures/FigS1.jpg")
p_b_5_2_ml
p_b_5_2_ml
d_N1 = read.csv("../combined_data/Set_N1_output.csv")
### ml ###
p_b_0.045_ml = ggplot(d_N1 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length \nin burnin (M)", title = paste("scale = ", unique(d_N1$scale), sep = "")) +
scale_color_manual(values = c("#D01C8B", "#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
p_b_0.045_ml
p_b_0.045_ml
d_N1 = read.csv("../combined_data/Set_N1_output.csv")
### ml ###
p_b_0.045_ml = ggplot(d_N1 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length \nin burnin (M)", title = paste("scale = ", unique(d_N1$scale), sep = "")) +
scale_color_manual(values = c("#D01C8B", "#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
p_b_0.045_ml
extra_ml_combined = plot_grid(p_b_5_2_ml, p_b_0.045_ml, nrow = 2, labels = "AUTO")
ggsave(extra_ml_combined, width = 6, height = 9, file = "manuscript_figures/FigS1.jpg")
d_N1$shape*d_N1$scale
d_7_ml$shape*d_7_ml$scale
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length \nin burnin (M)") +
scale_color_manual(values = c("#D01C8B", "#0072B2", "#999999")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = TeX(r"(Non-neutral $\mu_{\alpha}$ = 0.03)"))
p_b_5_2_ml
p_b_0.045_ml = ggplot(d_N1 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length \nin burnin (M)", title = TeX(r"(Non-neutral $\mu_{\alpha}$ = 0.0135)")) +
scale_color_manual(values = c("#D01C8B", "#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
p_b_0.045_ml
extra_ml_combined = plot_grid(p_b_5_2_ml, p_b_0.045_ml, nrow = 2, labels = "AUTO")
ggsave(extra_ml_combined, width = 6, height = 9, file = "manuscript_figures/FigS1.jpg")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS2.jpg")
d_va_lost = read.csv("../combined_data/va_lost_combined.csv")
plot_lost_va = ggplot(d_va_lost, aes(y = ((va_true - va_left)/va_true), x = factor(round(shape*scale, digits = 4)))) +
theme_bw() +
geom_boxplot() +
labs(y = TeX(r"(Fraction of the total $V_a(0)$ lost)"), x = TeX(r"(Non-neutral $\mu_{\alpha}$)")) +
theme(text = element_text(size = 15))
# Identify the simulation with the greatest fraction loss in V_a
message("Simulation with the geratest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == min (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# Identify the simulation with the smallest fraction loss in V_a
message("Simulation with the smallest relative loss in initial additive genic variance:")
d_va_lost[which(d_va_lost$va_left/d_va_lost$va_true == max (d_va_lost$va_left/d_va_lost$va_true)),]$Set_ID
# The analysis was run on AC3
# Load data
# Maximum loss
d_finescale_max = read.csv("../Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_11-47-27.887772.csv")
# Minimum loss
d_finescale_min = read.csv("../Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0_sim_1_finescale_va_ac3-n6_2025-03-14_13-08-48.187668.csv")
d_finescale = rbind(d_finescale_max, d_finescale_min)
d_finescale$locuswise_va_lost = d_finescale$locuswise_va_true - d_finescale$locuswise_va_left
d_finescale$lost_va_type = ifelse(d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0", "Min.", "Max.")
va_true_min = sum(d_finescale[d_finescale$Set_ID=="Set_9_biggar_2024-12-26_00-57-26.676051_9.60363636363636e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
va_true_max = sum(d_finescale[d_finescale$Set_ID=="Set_7_c5_2024-12-18_22-42-43.451498_2.08686868686869e-08_0.5_2_1000_10_4_0_0",]$locuswise_va_true)
# Restricting to selected loci only
d_finescale_sel = d_finescale[d_finescale$list_alpha!=0,]
# Calculate the fraction of the total initial V_a lost at each locus
d_finescale_sel$fract_locuswise_va_lost = ifelse(d_finescale_sel$lost_va_type=="Max.", d_finescale_sel$locuswise_va_lost/va_true_max, d_finescale_sel$locuswise_va_lost/va_true_min)
plot_finescale_relative_va_lost = ggplot(d_finescale_sel, aes(y = fract_locuswise_va_lost, x = abs(list_alpha), color = lost_va_type)) +
theme_bw() +
geom_point() +
labs(y = TeX(r"($V_a$ lost at a locus / Total $V_a(0)$)"), x = TeX(r"(Non-neutral $\alpha$)"), color = "Simulation type") +
theme(text = element_text(size = 15)) +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Min." = "#00BFC4", "Max." = "#F8766D"),
labels = c("Min." = TeX(r"(Min. $V_a$ lost)"), "Max." = TeX(r"(Max. $V_a$ lost)"))  # Custom legend labels
)
### Combine the two plots ###
va_lost_combined_plot = plot_grid(plot_lost_va, plot_finescale_relative_va_lost, ncol = 1, nrow = 2, labels = "AUTO")
ggsave(va_lost_combined_plot, width = 6, height = 9, file = "manuscript_figures/FigS2.jpg")
?aggregate
aggregate(I((va_true - va_left)/va_true)~I(shape*scale), d_va_lost, FUN = "mean")
