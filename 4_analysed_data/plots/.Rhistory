labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
p = make_std_plots(d_7[d_7$sequence_length*d_7$r_msp==0.5,])
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
p = make_std_plots(d_7[d_7$sequence_length*d_7$r_msp==0.5,])
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
dim(d_8)
p_b_large_std = make_std_plots(d_8)
p_b_large_std
plot(d_8$Residual_var)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
p_b_large_std
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
unique
unique(d_8$end_gen)
unique(d_8$r)
unique(d_8$r_expt)
unique(d_8$sequence_length*d_8$r_expt)
unique(d_8$sequence_length*d_8$r)
library(ggplot2)
library(cowplot)
library(latex2exp)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
p_nb_0.1_std = make_std_plots(d_0)
d_0 = read.csv("../combined_data/Set_0_output.csv") # Data for the standard set
d_2 = read.csv("../combined_data/Set_2_output.csv") # Varying r_expt, n_ind_exp, n_cages, ngen2
d_nb_0.1  = rbind(d_0, d_2)
##################################################################################################
####### Standard plots (Set_0: ml_expt = 0.1, n_indxpt = 1000, n_cages = 10, ngen2 = 4) ##########
##################################################################################################
p_nb_0.1_std = make_std_plots(d_0)
ggsave(p_nb_0.1_std$combined, width = 8, height = 8, file = "p_nb_0.1_std.jpg")
p_nb_0.1_std$combined
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_5_2_ml.jpg")
p_b_large_std$combined
range(d_8$seg_sites)
range(d_8$seg_sites_neu)
range(d_8$seg_sites - d_8$seg_sites_neu)
range(d_8$sequence_length*d_8$r)
d_8 = read.csv("../combined_data/Set_8_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_8)
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml.jpg")
p_b_large_std$combined
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_std = d_7[d_7$r==5e-7,]
d_6 = read.csv("../combined_data/Set_6_output.csv")
d_6_std = d_6[d_6$r*d_6$sequence_length==5&d_6$r_exp*d_6$sequence_length==2,]
p_b_5_2_std = make_std_plots(d_6_std)
ggsave(p_b_5_2_std$combined, width = 8, height = 8, file = "p_b_5_2_std.jpg")
p_b_5_2_std$combined
### ml_expt ###
p_b_5_2_ml_exp = ggplot(d_6 , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r_expt))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in burnin = ", unique(d_6$sequence_length*d_6$r), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml_exp, width = 8, height = 8, file = "p_b_5_2_ml_exp.jpg")
p_b_5_2_ml_exp
d_7 = read.csv("../combined_data/Set_7_output.csv")
d_7_std = d_7[d_7$r==5e-7,]
p_b_0.5_2_std = make_std_plots(d_7_std)
ggsave(p_b_0.5_2_std$combined, width = 8, height = 8, file = "p_b_0.5_2_std.jpg")
p_b_0.5_2_std$combined
d_7_ml = rbind(d_7, d_6_std)
### ml ###
p_b_5_2_ml = ggplot(d_7_ml , aes(y=vA_est, x = vA_true, color = factor(sequence_length*r))) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)"), color = "Map length (M)", title = paste("Map length in experiment = ", unique(d_7_ml$sequence_length*d_6$r_exp), " M", sep = "")) +
scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) +
theme(text = element_text(size = 15)) +
geom_smooth(method = "lm", se=FALSE) +
theme(plot.title = element_text(hjust = 0.5))
ggsave(p_b_5_2_ml, width = 8, height = 8, file = "p_b_5_2_ml.jpg")
p_b_5_2_ml
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_9 = read.csv("../combined_data/Set_9_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_9[d_9$all.gp==FALSE,])
p_b_large_std$combined
p_b_large_all.gp = make_std_plots(d_9[d_9$all.gp==TRUE,])
p_b_large_all.gp$combined
ggsave(plot = p_b_large_all.gp$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml.jpg")
d_9 = read.csv("../combined_data/Set_9_output.csv") # Data for the standard set
p_b_large_std = make_std_plots(d_9[d_9$all.gp==FALSE,])
ggsave(plot = p_b_large_std$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml.jpg")
p_b_large_std$combined
ggsave(plot = p_b_large_std$main, width = 5, height = 5, file = "talk_burnin_del.jpg")
# Plots for all.gp==TRUE
p_b_large_all.gp = make_std_plots(d_9[d_9$all.gp==TRUE,])
ggsave(plot = p_b_large_all.gp$combined, width = 8, height = 8, file = "p_b_large_0.5_2_ml_all.gp.jpg")
p_b_large_all.gp$combined
?sample
a = sample(c(0,1), )
nsites = 10000
sex = sample(c(0,1), size = nsites, replace = TRUE)
sex
female = ifelse(sex==0, rgamma(1, shape = 0.3, scale = 0.03), 0)
male = ifelse(sex==0, rgamma(0, shape = 0.3, scale = 0.03), 0)
female[1:10]
fmale[1:10]
male[1:10]
male = ifelse(sex==1, rgamma(1, shape = 0.3, scale = 0.03), 0)
female[1:10]
male[1:10]
female[1234]
male[1234]
male[6234]
female[6234]
cov(male, female)
nsims = 1000
nsites = 10000
covmf = rep(NA, nsims)
for sim in (1:nsims){
nsims = 1000
nsites = 10000
covmf = rep(NA, nsims)
for (sim in (1:nsims)){
sex = sample(c(0,1), size = nsites, replace = TRUE)
female = ifelse(sex==0, rgamma(1, shape = 0.3, scale = 0.03), 0)
male = ifelse(sex==1, rgamma(1, shape = 0.3, scale = 0.03), 0)
covmf[sim] = cov(female, male)
}
hist(covmf)
plot(female ~male)
male[1:100]
mu = (1:7)/2
mu
mu = (1:9)/2
mu
mu = (1:8)/2
mu
va = c(0.013, 0.026, 0.043, 0.054, 0.069, 0.086, 0.097, 0.11)
plot(va~mu)
fit1 = lm(va ~ mu)
(0.01 - coef(fit1)[1])/coef(fit1[2])
(0.01 - coef(fit1)[1])/coef(fit1)[2]
(0.1 - coef(fit1)[1])/coef(fit1)[2]
?spectrum
a = runif(1000, 1, 100)
plot(a)
plot(sin(1:100))
plot(sin(1:100000))
plot(sin(1:1000))
a = sin(1:10000)
spectrum(a)
names(spectrum(a))
spectrum(a)$freq
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(cowplot)
library(latex2exp)
make_std_plots = function(data, font_size = 15, end_gen = 25000){
# vA_est ~ vA_true
p_main = ggplot(data, aes(y = vA_est, x = vA_true)) +
theme_bw() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = TeX(r"(True $V_A$)"), y = TeX(r"(Estimate of $V_A$)")) +
theme(text = element_text(size = font_size))
# palpha_est histogram
p_palpha = ggplot(data, aes(x = palpha_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $p_{\alpha} $)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$palpha_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_intercept_est histogram
p_balpha_int = ggplot(data, aes(x = balpha_intercept_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(0)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_intercept_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# balpha_slope_est histogram
p_balpha_slope = ggplot(data, aes(x = balpha_slope_est)) +
theme_bw() +
geom_histogram(color = "black", fill = "white") +
labs(x = TeX(r"(Estimate of $\beta^{(1)}_{\bar{\alpha}}$)"), y = "Frequency") +
geom_vline(xintercept = 0, color = "red") +
geom_vline(xintercept = mean(data$balpha_slope_est), linetype = "dashed") +
theme(text = element_text(size = font_size))
# Combine the four plots
p_combined = plot_grid(p_main, p_palpha, p_balpha_int, p_balpha_slope, labels = "AUTO")
# Title
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
ml_expt = unique(data$sequence_length*data$r_expt)
if(length(ml_expt)>1){stop("The data set does not have the same map length in the experiment in every simulation.")}
end_gen = unique(data$end_gen)
if(length(end_gen)>1){stop("The data doe not have have the same end_gen for every simulations")}
if(end_gen==2){
ml = unique(data$sequence_length*data$r_msp)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}else{
ml = unique(data$sequence_length*data$r)
if(length(ml)>1){stop("The data set does not have the same map length in the burnin phase in every simulation.")}
}
title = ggdraw() + draw_label(paste("Map length in burnin = ", ml, " M, Map length in experiment = ", ml_expt, " M", sep = ""), hjust = 0.5, size = font_size)
# Add title
p_combined = plot_grid(title, p_combined, ncol = 1, rel_heights = c(0.1,1))
return(list(main = p_main, palpha = p_palpha, balpha_int = p_balpha_int, balpha_slope = p_balpha_slope,
combined = p_combined))
}
d_test = read.csv("../combined_data/Test_0.045_output.csv") # Data for the standard set
setwd("~/GitHub/Va_simulations/4_analysed_data/plots")
setwd("~/GitHub/Va_simulations/4_analysed_data/plots")
d_test = read.csv("../combined_data/Test_0.045_output.csv") # Data for the standard set
dim(d_test)
make_std_plots(d_test)
