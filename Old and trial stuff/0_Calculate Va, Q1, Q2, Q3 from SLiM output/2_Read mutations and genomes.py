############################################################################################################################################################
# This program reads the full output generated by SLiM. !!!(Currently only works for autosomes ("A"))!!!
# It produces the following as output
# 1. A text file of all mutations and their information
# 2. A text file of all genomes containing lists of their mutations
# 3. A csv file containing the c matrix for genomes. Note that the genomes in the SLiM output are such that genomes 2*i and 2*i - 1 belong to individual i
############################################################################################################################################################

import numpy as np



#### Picking out mutations
# Create an empty file to write the mutations in
f_mutation = open("Interim_files/mutations.txt", "w")

# Create dicts that will be filled with line numbers and the corresponding text on those lines
dict_1m = {}
dict_2m = {}

for i_m, line_m in enumerate(open("Interim_files/Output_WF_SliM.txt")):
    dict_1m[line_m.rstrip()] = i_m
    dict_2m[i_m] = line_m

# Identify start and end points of the section showing mutations
start_m = dict_1m["Mutations:"]
end_m = dict_1m["Individuals:"]

n_mutations = 0

# Write headers 
f_mutation.write("Temp_ID Permanent_ID Mutation_type Position s h Subpop Tick Number\n")
for j_m in range(start_m + 1,end_m):
   f_mutation.write(dict_2m[j_m])
   n_mutations = n_mutations + 1

f_mutation.close()



#### Picking out genomes     
# Create an empty file to write the genomes in
f_genomes = open("Interim_files/all_genomes.txt", "w")

# Create an empty list to store genomes beloging to subpopulation p2 (i.e. sampled genomes). Later this list will be edited to remove unnecessary text and only have the list of mutations for each genome.
a = []

dict_1g = {}
dict_2g = {}

for i_g, line_g in enumerate(open("Interim_files/Output_WF_SLiM.txt")):
    dict_1g[line_g.rstrip()] = i_g
    dict_2g[i_g] = line_g

# Identify start point of the section showing genomes. The end point is the end of the file
start_g = dict_1g["Genomes:"]


n_genomes = 0
for j_g in range(start_g + 1,len(dict_1g)):
   f_genomes.write(dict_2g[j_g])
   #Only add the genomes of p2 to a
   if (dict_2g[j_g].find("p2:")>-1):
       a.append(dict_2g[j_g])
       n_genomes = n_genomes + 1

f_genomes.close()



#strip the unnecessary parts from rows of a, and convert strings to int
for genome in range(0,len(a)):
    a[genome] = a[genome][a[genome].find("A")+2:].rstrip().split(" ")
    # Convert the mutations in each genome into integers (currently they are strings)
    for mutation in range(0, len(a[genome])):
        a[genome][mutation] = int(a[genome][mutation])

#print(a[19999])



# Create an empty matrix having dimensions n_individuals*n_genomes to create the "c" matrix
c = np.zeros((n_genomes,n_mutations))


# Read a and fill c
genome = 0

for genome in range(0,len(a)):
    
    #print(genome)
    for mutation in a[genome]:
        c[genome][mutation] = 1

#Write the c matrix to a file
import numpy
c_1 = numpy.asarray(c)
numpy.savetxt("Interim_files/c_matrix.csv", c_1, delimiter = ",")

print(n_mutations)
print(n_genomes)


