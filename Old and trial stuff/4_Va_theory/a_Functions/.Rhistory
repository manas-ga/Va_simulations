source("a_Functions/Function_to_Compute_V1_Q1_Q2_Q3.R")
# Specify the folder containing c matrices for genomes
genomes_path = "b_Interim_files/C_Matrices"
# Specify the folder containing mutations files
mutations_path = "b_Interim_files/Mutations"
#######################################################################
### Build matching filepaths for mutations and c matrices           ###
### Calculate va, q1, q2, q3 for each gen and store in a data frame ###
#######################################################################
# Enter the starting generation, the ending generation and the frequency of the output in SLiM
start_gen = 101000
end_gen = 200000
output_freq = 1000
quantities_bc = data.frame()
for (gen in seq(start_gen, end_gen, output_freq)){
c_matrix_filepath = paste(genomes_path, "/c_matrix_", format(gen, scientific = F), ".csv", sep = "")
mutations_filepath = paste(mutations_path, "/mutations_", format(gen, scientific = F), ".txt", sep = "")
# The gen inside the paste() function needs to be formatted because otherwise for some generations it prints the scientific format (eg 2e+05, etc.)
quantities_bc = rbind(quantities_bc, c(gen, compute_va_q1_q2_q3(c_matrix_filepath, mutations_filepath)))
# Just adding a progress bar
progress = (gen - (start_gen-output_freq))/(end_gen - (start_gen-output_freq))*100
print(paste(progress, "% complete!"))
}
View(quantities_bc)
#########################################################
################### Specify paths #######################
#########################################################
# Add the source of the file containing the function to compute va, q1, q2, q3
source("a_Functions/Function_to_Compute_V1_Q1_Q2_Q3.R")
# Specify the folder containing c matrices for genomes
genomes_path = "b_Interim_files/C_Matrices"
# Specify the folder containing mutations files
mutations_path = "b_Interim_files/Mutations"
#######################################################################
### Build matching filepaths for mutations and c matrices           ###
### Calculate va, q1, q2, q3 for each gen and store in a data frame ###
#######################################################################
# Enter the starting generation, the ending generation and the frequency of the output in SLiM
start_gen = 101000
end_gen = 200000
output_freq = 1000
quantities_bc = data.frame()
for (gen in seq(start_gen, end_gen, output_freq)){
c_matrix_filepath = paste(genomes_path, "/c_matrix_", format(gen, scientific = F), ".csv", sep = "")
mutations_filepath = paste(mutations_path, "/mutations_", format(gen, scientific = F), ".txt", sep = "")
# The gen inside the paste() function needs to be formatted because otherwise for some generations it prints the scientific format (eg 2e+05, etc.)
quantities_bc = rbind(quantities_bc, c(gen, compute_va_q1_q2_q3(c_matrix_filepath, mutations_filepath)))
# Just adding a progress bar
progress = (gen - (start_gen-output_freq))/(end_gen - (start_gen-output_freq))*100
print(paste(progress, "% complete!"))
}
#########################################################
################### Specify paths #######################
#########################################################
# Add the source of the file containing the function to compute va, q1, q2, q3
source("a_Functions/Function_to_Compute_V1_Q1_Q2_Q3.R")
# Specify the folder containing c matrices for genomes
genomes_path = "b_Interim_files/C_Matrices"
# Specify the folder containing mutations files
mutations_path = "b_Interim_files/Mutations"
#######################################################################
### Build matching filepaths for mutations and c matrices           ###
### Calculate va, q1, q2, q3 for each gen and store in a data frame ###
#######################################################################
# Enter the starting generation, the ending generation and the frequency of the output in SLiM
start_gen = 101000
end_gen = 200000
output_freq = 1000
quantities_bc = data.frame()
for (gen in seq(start_gen, end_gen, output_freq)){
c_matrix_filepath = paste(genomes_path, "/c_matrix_", format(gen, scientific = F), ".csv", sep = "")
mutations_filepath = paste(mutations_path, "/mutations_", format(gen, scientific = F), ".txt", sep = "")
# The gen inside the paste() function needs to be formatted because otherwise for some generations it prints the scientific format (eg 2e+05, etc.)
quantities_bc = rbind(quantities_bc, c(gen, compute_va_q1_q2_q3(c_matrix_filepath, mutations_filepath)))
# Just adding a progress bar
progress = (gen - (start_gen-output_freq))/(end_gen - (start_gen-output_freq))*100
print(paste(progress, "% complete!"))
}
colnames(quantities_bc) = c("Generation", "Va", "Q1", "Q2", "Q3")
write.csv(quantities_bc, "c_Output/Quantities_BC.csv")
plot(Va)
plot(quantities_BC$Va)
plot(quantities_bc$Va)
plot(quantities_bc$Q1)
plot(quantities_bc$Q2)
plot(quantities_bc$Q3)
plot(quantities_bc$Q1)
plot(quantities_bc$Q2)
plot(quantities_bc$Q1)
plot(quantities_bc$Q2)
which(quantities_bc$Q2>=500)
which(mod(quantities_bc$Q2)>=500)
which(abs(quantities_bc$Q2)>=500)
plot(quantities_bc$Q1)
which(mod(quantities_bc$Q1)>=0.2)
which(abs(quantities_bc$Q1)>=0.2)
which(abs(quantities_bc$Q2)>=500)
plot(quantities_bc$Q2)
compute_va_q1_q2_q3("1_Interim_files/C_Matrices/c_matrix_153000.csv", "1_Interim_files/Mutations/mutations_153000.txt")
compute_va_q1_q2_q3("b_Interim_files/C_Matrices/c_matrix_153000.csv", "b_Interim_files/Mutations/mutations_153000.txt")
a_153000 = compute_va_q1_q2_q3("b_Interim_files/C_Matrices/c_matrix_153000.csv", "b_Interim_files/Mutations/mutations_153000.txt")
which(abs(quantities_bc$Q2)>=500)
which(abs(quantities_bc$Q2)>=100)
setwd("C:/Academics/Post-doc/Va_simulations/1_Distributions of Va_Q1, Q2, Q3 during a SLiM run/zzzz_Laboratory")
path_mutations = "b_Interim_files/Mutations/mutations_153000.txt"
path_genomes = "b_Interim_files/C_Matrices/c_matrix_153000.csv"
# Read genomes
c_genome = read.csv(path_genomes, header=F)
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
c_ind = c_genome[seq(1, 2*n_individuals, 2),] + c_genome[seq(2, 2*n_individuals, 2),]
L = cov(c_ind)
missing_loci = which(diag(L)==0)
retained_loci = which(diag(L)!=0)
L_ret = L[retained_loci,retained_loci]
c_ind_ret = c_ind[,retained_loci]
R = cov2cor(L_ret)
mutations = read.table(path_mutations, header=T, sep = " ")
mutations = mutations[order(mutations$Temp_ID),]
mutations_ret = mutations[retained_loci,]
n_sites_ret = ncol(c_ind_ret)
w = rep(1, nrow(c_ind_ret))
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites_ret){
# Calculate the fitness of each individual using a multiplicative model for fitness
w[k] = w[k] * (1 + ((2-c_ind_ret[k,m])*mutations_ret$h[m] + (c_ind_ret[k,m]-1)/2)*c_ind_ret[k,m]*mutations_ret$s[m])
}
}
#Calculate relative
Fitness = w/mean(w)
fit_1 <- lm(Fitness ~ ., data = c_ind_ret)
list_alpha = coef(fit_1)[-1]
list_alpha[is.na(list_alpha)]<-0
list_neutral = which(mutations_ret$s==0)
list_selected = which(mutations_ret$s!=0)
va = t(list_alpha)%*%L_ret%*%list_alpha
Frequency = colMeans(c_ind_ret)/2
q1 = cov(2*0.5*Frequency*(1-Frequency), list_alpha*list_alpha)
q2 = 0
for (j in 1:(length(list_selected) - 1)){
for (k in (j+1):length(list_selected)){
q2 = q2 + list_alpha[list_selected[j]]*list_alpha[list_selected[k]]*((2*Frequency[list_selected[j]]*(1 - Frequency[list_selected[j]])*2*Frequency[list_selected[k]]*(1 - Frequency[list_selected[k]]))^0.5)*sum(R[j, list_neutral]*R[k, list_neutral])
}
#print(q2)
}
q3_a = rowSums(R[list_selected, list_neutral]*R[list_selected, list_neutral])
q3_b = list_alpha[list_selected]*((2*Frequency[list_selected]*(1 - Frequency[list_selected]))^0.5)
q3 = cov(q3_a, q3_b)
#q3_a_reordered = rowSums(R[list_selected_reordered, list_neutral_reordered]*R[list_selected_reordered, list_neutral_reordered])
#q3
##############################
##############################
######### Output #############
plot(list_alpha)
plot(w)
length(w)
plot(list_alpha)
plot(w)
which(w<=0.96)
which(c_ind_ret[289,]>=1)
hist(mutations$s)
plot(mutations$s)
which(mutations$s<=-0.6)
which(w<=0.96)
which(mutations_ret$s<=-0.6)
hist(mutations_ret$s)
plot(mutations_ret$s)
which(mutations_ret$s<=-0.3)
which(w<=0.96)
c_ind[289, 5793]
c_ind[462, 5793]
hist(list_alpha)
plot(list_alpha)
va
dim(c_ind_ret)
q1
q2
q3
plot(w)
which(w<=0.96)
plot(mutations_ret$s)
plot(mutations_ret$s[which(c_ind_ret[289,]?=1)])
plot(mutations_ret$s[which(c_ind_ret[289,]>=1)])
plot(mutations_ret$s[which(c_ind_ret[462,]>=1)])
plot(mutations_ret$s[which(c_ind_ret[289,]>=1)])
which(mutations_ret$s<=-0.3)
c_ind_ret[289, 5793]
c_ind_ret[462, 5793]
#TEST BY REMOVING INDIVIDUALS WITH EXCEPTIONALLY LOW FITNESSES
fit_1 <- lm(Fitness[-c(289, 462)] ~ ., data = c_ind_ret[-c(289, 462),])
list_alpha = coef(fit_1)[-1]
list_alpha[is.na(list_alpha)]<-0
list_neutral = which(mutations_ret$s==0)
list_selected = which(mutations_ret$s!=0)
va = t(list_alpha)%*%L_ret%*%list_alpha
Frequency = colMeans(c_ind_ret)/2
q1 = cov(2*0.5*Frequency*(1-Frequency), list_alpha*list_alpha)
q2 = 0
for (j in 1:(length(list_selected) - 1)){
for (k in (j+1):length(list_selected)){
q2 = q2 + list_alpha[list_selected[j]]*list_alpha[list_selected[k]]*((2*Frequency[list_selected[j]]*(1 - Frequency[list_selected[j]])*2*Frequency[list_selected[k]]*(1 - Frequency[list_selected[k]]))^0.5)*sum(R[j, list_neutral]*R[k, list_neutral])
}
#print(q2)
}
q3_a = rowSums(R[list_selected, list_neutral]*R[list_selected, list_neutral])
q3_b = list_alpha[list_selected]*((2*Frequency[list_selected]*(1 - Frequency[list_selected]))^0.5)
q3 = cov(q3_a, q3_b)
#q3_a_reordered = rowSums(R[list_selected_reordered, list_neutral_reordered]*R[list_selected_reordered, list_neutral_reordered])
#q3
##############################
##############################
######### Output #############
plot(list_alpha)
va
q1
q2
q3
#########################################################
################### Specify paths #######################
#########################################################
# Add the source of the file containing the function to compute va, q1, q2, q3
source("a_Functions/Function_to_Compute_V1_Q1_Q2_Q3.R")
# Specify the folder containing c matrices for genomes
genomes_path = "b_Interim_files/C_Matrices"
# Specify the folder containing mutations files
mutations_path = "b_Interim_files/Mutations"
#######################################################################
### Build matching filepaths for mutations and c matrices           ###
### Calculate va, q1, q2, q3 for each gen and store in a data frame ###
#######################################################################
# Enter the starting generation, the ending generation and the frequency of the output in SLiM
start_gen = 101000
end_gen = 200000
output_freq = 1000
quantities_bc = data.frame()
for (gen in seq(start_gen, end_gen, output_freq)){
c_matrix_filepath = paste(genomes_path, "/c_matrix_", format(gen, scientific = F), ".csv", sep = "")
mutations_filepath = paste(mutations_path, "/mutations_", format(gen, scientific = F), ".txt", sep = "")
# The gen inside the paste() function needs to be formatted because otherwise for some generations it prints the scientific format (eg 2e+05, etc.)
quantities_bc = rbind(quantities_bc, c(gen, compute_va_q1_q2_q3(c_matrix_filepath, mutations_filepath)))
# Just adding a progress bar
progress = (gen - (start_gen-output_freq))/(end_gen - (start_gen-output_freq))*100
print(paste(progress, "% complete!"))
}
colnames(quantities_bc) = c("Generation", "Va", "Q1", "Q2", "Q3")
write.csv(quantities_bc, "c_Output/Quantities_BC.csv")
plot(quantities_bc)
plot(quantities_bc$Va)
plot(quantities_bc$Q1)
plot(quantities_bc$Q2)
plot(quantities_bc$Q3)
#########################################################
################### Specify paths #######################
#########################################################
# Add the source of the file containing the function to compute va, q1, q2, q3
source("a_Functions/Function_to_Compute_V1_Q1_Q2_Q3.R")
# Specify the folder containing c matrices for genomes
genomes_path = "b_Interim_files/C_Matrices"
# Specify the folder containing mutations files
mutations_path = "b_Interim_files/Mutations"
#######################################################################
### Build matching filepaths for mutations and c matrices           ###
### Calculate va, q1, q2, q3 for each gen and store in a data frame ###
#######################################################################
# Enter the starting generation, the ending generation and the frequency of the output in SLiM
start_gen = 101000
end_gen = 200000
output_freq = 1000
quantities_bc = data.frame()
for (gen in seq(start_gen, end_gen, output_freq)){
c_matrix_filepath = paste(genomes_path, "/c_matrix_", format(gen, scientific = F), ".csv", sep = "")
mutations_filepath = paste(mutations_path, "/mutations_", format(gen, scientific = F), ".txt", sep = "")
# The gen inside the paste() function needs to be formatted because otherwise for some generations it prints the scientific format (eg 2e+05, etc.)
quantities_bc = rbind(quantities_bc, c(gen, compute_va_q1_q2_q3(c_matrix_filepath, mutations_filepath)))
# Just adding a progress bar
progress = (gen - (start_gen-output_freq))/(end_gen - (start_gen-output_freq))*100
print(paste(progress, "% complete!"))
}
colnames(quantities_bc) = c("Generation", "Va", "Q1", "Q2", "Q3")
write.csv(quantities_bc, "c_Output/Quantities_BC.csv")
plot(quantities_bc$Va)
plot(quantities_bc$Q1)
plot(quantities_bc$Q2)
plot(quantities_bc$Q3)
setwd("C:/Academics/Post-doc/Va_simulations/1_Distributions of Va_Q1, Q2, Q3 during a SLiM run/zzzz_Laboratory")
path_genomes = "b_Interim_files/C_Matrices/c_matrix_39000.csv"
path_mutations = "b_Interim_files/Mutations?mutations_39000.txt"
# Read genomes
c_genome = read.csv(path_genomes, header=F)
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
c_ind = c_genome[seq(1, 2*n_individuals, 2),] + c_genome[seq(2, 2*n_individuals, 2),]
L = cov(c_ind)
missing_loci = which(diag(L)==0)
retained_loci = which(diag(L)!=0)
L_ret = L[retained_loci,retained_loci]
c_ind_ret = c_ind[,retained_loci]
R = cov2cor(L_ret)
mutations = read.table(path_mutations, header=T, sep = " ")
mutations = mutations[order(mutations$Temp_ID),]
path_genomes = "b_Interim_files/C_Matrices/c_matrix_39000.csv"
path_mutations = "b_Interim_files/Mutations/mutations_39000.txt"
# Read genomes
c_genome = read.csv(path_genomes, header=F)
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
c_ind = c_genome[seq(1, 2*n_individuals, 2),] + c_genome[seq(2, 2*n_individuals, 2),]
L = cov(c_ind)
missing_loci = which(diag(L)==0)
retained_loci = which(diag(L)!=0)
L_ret = L[retained_loci,retained_loci]
c_ind_ret = c_ind[,retained_loci]
R = cov2cor(L_ret)
mutations = read.table(path_mutations, header=T, sep = " ")
mutations = mutations[order(mutations$Temp_ID),]
mutations_ret = mutations[retained_loci,]
n_sites_ret = ncol(c_ind_ret)
w = rep(1, n_individuals)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites_ret){
# Calculate the fitness of each individual using a multiplicative model for fitness
w[k] = w[k] * (1 + ((2-c_ind_ret[k,m])*mutations_ret$h[m] + (c_ind_ret[k,m]-1)/2)*c_ind_ret[k,m]*mutations_ret$s[m])
}
}
#Calculate relative
Fitness = w/mean(w)
fit_1 <- lm(Fitness ~ ., data = c_ind_ret)
list_alpha = coef(fit_1)[-1]
list_alpha[is.na(list_alpha)]<-0
list_alpha_full = coef(fit_1)[-1]
list_neutral = which(mutations_ret$s==0)
list_selected = which(mutations_ret$s!=0)
va = t(list_alpha)%*%L_ret%*%list_alpha
Frequency = colMeans(c_ind_ret)/2
frame_q1 = cbind(Frequency, list_alpha_full)
frame_q1 = frame_q1[complete.cases(frame_q1),]
q1 = cov(2*frame_q1[,1]*frame_q1[,1], frame_q1[,2]*frame_q1[,2])
q2 = 0
for (j in 1:(length(list_selected) - 1)){
for (k in (j+1):length(list_selected)){
q2 = q2 + list_alpha[list_selected[j]]*list_alpha[list_selected[k]]*((2*Frequency[list_selected[j]]*(1 - Frequency[list_selected[j]])*2*Frequency[list_selected[k]]*(1 - Frequency[list_selected[k]]))^0.5)*sum(R[j, list_neutral]*R[k, list_neutral])
}
#print(q2)
}
q3_a = rowSums(R[list_selected, list_neutral]*R[list_selected, list_neutral])
q3_b = list_alpha_full[list_selected]*((2*Frequency[list_selected]*(1 - Frequency[list_selected]))^0.5)
frame_q3 = cbind(q3_a, q3_b)
frame_q3 = frame_q3[complete.cases(frame_q3),]
q3 = cov(frame_q3[,1], frame_q3[,2])
return(c(va, q1, q2, q3))
}
va
q1
q2
q3
plot(w)
plot(list_alpha)
plot(list_alpha_full)
hist(list_alpha_full)
plot(w)
plot(mutations_ret$s, mutations_ret$Number)
plot(mutations_ret$s, mutations_ret$Number*mutations_ret$s)
plot(mutations_ret$s*mutations_ret$s, mutations_ret$Number)
q1
cov(mutations_ret$s*mutations_ret$s, mutations_ret$Number)
cov(mutations_ret$s*mutations_ret$s, 2*mutations_ret$Number*(1-mutations_ret$Number))
cov(mutations_ret$s*mutations_ret$s, 2*mutations_ret$Number)
cov(mutations_ret$s*mutations_ret$s, 2*mutations_ret$Number/20000*(1-mutations_ret$Number/20000))
q1
plot(w)
which(w<0.998)
which(w<0.988)
fit_67 = lm(Fitness[-67] ~ ., data = c_ind_ret[-67,])
list_alpha_67 = coef(fit_67)[-1]
plot(list_alpha)
fit_1 <- lm(Fitness ~ ., data = c_ind_ret)
list_alpha = coef(fit_1)[-1]
plot(list_alpha)
plot(list_alpha_67)
plot(list_alpha)
plot(list_alpha, list_alpha_67)
fit_67 = lm(Fitness[-67] ~ ., data = c_ind_ret[-100,])
list_alpha_67 = coef(fit_67)[-1]
plot(list_alpha, list_alpha_67)
fit_67 = lm(Fitness[-100] ~ ., data = c_ind_ret[-100,])
list_alpha_67 = coef(fit_67)[-1]
plot(list_alpha, list_alpha_67)
fit_new = lm(Fitness[-55] ~ ., data = c_ind_ret[-55,])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha, list_alpha_new)
fit_new = lm(Fitness[-5] ~ ., data = c_ind_ret[-5,])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha, list_alpha_new)
cbind(list_alpha, list_alpha_new)
fit_new = lm(Fitness[-25] ~ ., data = c_ind_ret[-25,])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha, list_alpha_new)
fit_new = lm(Fitness[-15] ~ ., data = c_ind_ret[-15,])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha, list_alpha_new)
cbind(Fitness, Fitness[-15])
Fitness[-15]
length(Fitness[-15])
length(Fitness)
c_ind_ret[-15,]
test = seq(100, 0, 0)
test = sample(0:0, 100)
test = sample(0:0, 100, replace = T)
test
test = sample(0:0, 100, replace = T)
for (i in 1:100){
fit_new = lm(Fitness[-i] ~ ., data = c_ind_ret[-i,])
list_alpha_new = coef(fit_new)[-1]
test[i] = var(list_alpha_new)
}
plot(test)
test
test = sample(0:0, 100, replace = T)
for (i in 1:100){
fit_new = lm(Fitness[-i] ~ ., data = c_ind_ret[-i,])
list_alpha_new = coef(fit_new)[-1]
test[i] = var(na.omit(list_alpha_new))
}
test
plot(test)
plot(test, Fitness)
var_alpha = sample(0:0, 100, replace = T)
for (i in 1:100){
fit_new = lm(Fitness[-i] ~ ., data = c_ind_ret[-i,])
list_alpha_new = coef(fit_new)[-1]
var_alpha[i] = var(na.omit(list_alpha_new))
}
plot(Fitness, var_alpha)
plot(w, var_alpha)
var_alpha = sample(0:0, 100, replace = T)
mean_alpha = sample(0:0, 100, replace = T)
for (i in 1:100){
fit_new = lm(Fitness[-i] ~ ., data = c_ind_ret[-i,])
list_alpha_new = coef(fit_new)[-1]
var_alpha[i] = var(na.omit(list_alpha_new))
mean_alpha[i] = mean(na.omit(list_alpha_new))
}
plot(w, var_alpha)
plot(w, mean_alpha)
mean(list_alpha)
mean(na.omit(list_alpha))
plot(var_alpha, mean_alpha)
hist(mean_alpha)
hist(var_alpha)
plot(mutations_ret$s)
which(mutations_ret$s<(-0.08))
fit_new = lm(Fitness~., data = c_ind_ret[, -c(281, 297, 372)])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha)
plot(list_alpha_new)
plot(list_alpha_new, list_alpha)
plot(list_alpha_new)
plot(list_alpha)
fit_new = lm(Fitness~., data = c_ind_ret[, -c(281, 297, 372, 100, 150)])
list_alpha_new = coef(fit_new)[-1]
plot(list_alpha_new)
plot(list_alpha)
plot(list_alpha_new)
plot(list_alpha)
setwd("C:/Academics/Post-doc/Va_simulations/1_Distributions of Va_Q1, Q2, Q3 during a SLiM run/zzzz_Laboratory")
path_genomes = "b_Interim_files/C_Matrices/c_matrix_39000.csv"
path_mutations = "b_Interim_files/Mutations/mutations_39000.txt"
# Read genomes
c_genome = read.csv(path_genomes, header=F)
n_individuals = nrow(c_genome)/2
n_sites = ncol(c_genome)
c_ind = c_genome[seq(1, 2*n_individuals, 2),] + c_genome[seq(2, 2*n_individuals, 2),]
L = cov(c_ind)
missing_loci = which(diag(L)==0)
retained_loci = which(diag(L)!=0)
L_ret = L[retained_loci,retained_loci]
c_ind_ret = c_ind[,retained_loci]
R = cov2cor(L_ret)
mutations = read.table(path_mutations, header=T, sep = " ")
mutations = mutations[order(mutations$Temp_ID),]
mutations_ret = mutations[retained_loci,]
n_sites_ret = ncol(c_ind_ret)
w = rep(1, n_individuals)
for (k in 1:n_individuals){
# loop through loci, summing fitness contributions
for (m in 1:n_sites_ret){
# Calculate the fitness of each individual using a multiplicative model for fitness
w[k] = w[k] * (1 + ((2-c_ind_ret[k,m])*mutations_ret$h[m] + (c_ind_ret[k,m]-1)/2)*c_ind_ret[k,m]*mutations_ret$s[m])
}
}
#Calculate relative
Fitness = w/mean(w)
fit_1 <- lm(Fitness ~ ., data = c_ind_ret)
list_alpha = coef(fit_1)[-1]
list_alpha[is.na(list_alpha)]<-0
list_alpha_full = coef(fit_1)[-1]
list_alpha
list_alpha_full
list_neutral = which(mutations_ret$s==0)
list_selected = which(mutations_ret$s!=0)
va = t(list_alpha)%*%L_ret%*%list_alpha
Frequency = colMeans(c_ind_ret)/2
frame_q1 = cbind(Frequency, list_alpha_full)
View(frame_q1)
frame_q1 = frame_q1[complete.cases(frame_q1),]
plot(frame_q1[,1], frame_q1[,2])
plot(frame_q1[,1], frame_q1[,2]*frame_q1[,2])
cov(frame_q1[,1], frame_q1[,2]*frame_q1[,2])
cov(frame_q1[,1]*(1-frame_q1[,1])*2, frame_q1[,2]*frame_q1[,2])
setwd("C:/Academics/Post-doc/Va_simulations/1_Distributions of Va_Q1, Q2, Q3 during a SLiM run/a_Functions")
