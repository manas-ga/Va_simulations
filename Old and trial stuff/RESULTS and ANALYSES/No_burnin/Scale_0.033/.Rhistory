bdelta = c(rep("fixed", 9), rep("estimate", 9))
bdelta
pmatrix = cbind(bdelta, pmatrix)
pmatrix = cbind(bdelta, param_matrix)
param_matrix = cbind(bdelta, param_matrix)
param_matrix
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1.4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix = rbind(param_matrix, param_matrix)
param_matrix = cbind(c(rep("fixed", 9), rep("estimate", 9)), param_matrix)
param_matrix
?save
getwd()
write.table(param_matrix, file = "param.txt", sep = " ")
write.table(param_matrix, file = "param.txt", sep = " ", col.names = FALSE, row.names = FALSE)
d = read.csv(file.choose(), header=T)
head(d)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
hist(d$pdelta_est)
hist(d$pdelta_est, breaks = 50)
a = c(1,2,3,4)
a
collapse(a)
paste(a[1], a[2], a[3], sep = "_")
### Base path and path to Vw.Rmd (file containing Jarrod's functions) (depending on the system) ###
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/Va_simulations/5_History_sim"
Vw_path = "/ceph/users/marun/Va_simulations/6_Code_Test/Vw.Rmd"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/5_History_sim" ## ON VERA
Vw_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/6_Code_Test/Vw.Rmd"  ### Jarrod's functions and other code is stored here
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local Wsl
Vw_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}else{
base_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local windows
Vw_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}
}
}
# Paths to various scripts that are used for running the simulations and extracting information from SLiM outputs
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_History.slim")                                                    ## SLiM script running the history
msprime_add_neutral_path = file.path(base_path, "1_History_add_neutral_mut.py")                               ## msprime script that adds neutral mutations to the tree sequence generated by 1_History.slim
slim_expt_path = file.path(base_path, "4_Experiment.slim")                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
# Paths to various temporary directories
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
###################################
###### Create file structure ######
###################################
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
#system(paste("rm -rf", paste(base_path, "/b_Interim_files/*", sep = ""))) # Remove the contents of this directory
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
##### Create a spreadsheet to store cumulative data across all simulations (only if it doesn't exist already)
# Assign a "Set_ID" to each set of simulations
# The set ID is the name of the system + time at which this script starts running. It stays constant throughout (for all the simulations run in that particular set).
Set_ID = as.character(paste(Sys.info()["nodename"], Sys.time()))
Set_ID = gsub(" ", "_", Set_ID)
Set_ID = paste(Set_ID, commandArgs(trailingOnly = TRUE)[1], commandArgs(trailingOnly = TRUE)[2], commandArgs(trailingOnly = TRUE)[3], commandArgs(trailingOnly = TRUE)[4], commandArgs(trailingOnly = TRUE)[5], sep = "_")
paste("rm ", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = ""
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
sim = 1
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = " "
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep =""), sep = " ")
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Sex_specific_sel" ## ON VERA
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Academics/Post-doc/Sex_specific_sel" ## Local Wsl
}else{
base_path = "C:/Academics/Post-doc/Sex_specific_sel" ## Local windows
}
}
}
base_path
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_FWD_sim.slim")                                                    ## SLiM script running the history                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
d = read.csv(file.choose())
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.11), ylim = c(0.005, 0.11))
abline(0,1)
d = read.csv(file.choose(), header=T)
d = read.csv(file.choose(), header=T)
head(d)
library(ggplot2)
p = ggplot(d, aes(y = rmf, x = year))
p + theme_bw() + geom_point()
p = ggplot(d, aes(y = rmf, x = Year))
p + theme_bw() + geom_point()
p + theme_bw() + geom_point() + geom_smooth()
p + theme_bw() + geom_point() + geom_smooth(method = lm)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p = ggplot(d, aes(y = rmf, x = Year, label = Study))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=-2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=-0.2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0.2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0.2, vjust=0.2)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text()
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.9)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.0)
d = read.csv(file.choose())
p = ggplot(d, aes(y = rmf, x = Year, label = Study))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.1, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.03, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.01, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.005, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.001, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.000, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = 0, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text( vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_label_repel(aes(label = Name),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_label_repel(aes(label = Study)
)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text( vjust = -0.5)
d = read.csv(file.choose(), header=d)
d = read.csv(file.choose(), header=T)
plot(d$vA_est ~d$vA_true, xlim = c(0.0, 0.11), ylim = c(0.0, 0.11))
abline(0,1)
d = read.csv(file.choose(), header=T)
plot(d$vA_est ~ d$vA_true, xlim = c(0, 0.11), y = c(0, 0.11))
d
d$vA_true
d$vA_est
plot(d$vA_est ~ d$vA_true, xlim = c(0, 0.11), y = c(0, 0.11))
length(d$vA_est)
length(d$vA_true)
plot(d$vA_est ~ d$vA_true)
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.1))
abline(0,1)
d = read.csv(file.choose())
View(d)
?grep
grep("Set_ID", d[,1])
grep("Set_ID", d[,1], invert = TRUE)
d1 = d[grep("Set_ID", d[,1], invert = TRUE),]
d1
View(d1)
d1 = d1[order(d1$mu),]
View(d1)
plot(d1$vA_est ~ d1$vA_true)
abline(0,1)
View(d1)
dim(d1)
d1[1,2]
typeof(d1$mu_msp)
d1$mu_msp = as.numeric(d1$mu_msp)
d1 = d1[order(d1$mu),]
View(d1)
typeof(d1$mu_msp)
typeof(d1$mu)
d1$mu = as.numeric(d1$mu)
d1 = d1[order(d1$mu),]
View(d1)
d = read.csv(file.choose())
View(d)
grep("Set_ID", d$Set_ID, invert = TRUE)
d1 = d[grep("Set_ID", d$Set_ID, invert = TRUE),]
d1
View(d1)
plot(d1$vA_est ~ d1$vA_true)
abline(0,1)
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.11), ylim=c(0.005, 0.11))
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.105), ylim=c(0.005, 0.105))
abline(0,1)
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.105), ylim=c(0.005, 0.105), xlab = "True value of Vw", ylab = "Estimate of Vw")
abline(0,1)
a = c(0, 0.01, 0.0001, 0, 1, 0.999, 0.5, 1)
which(0<a<1)
which(a<1)
which(a<1&a>0)
mu = c(5e-8, 1e-7, 3e-7)
est = c(0.007498391, 0.036789558, 0.104107755)
lm(est~mu)
(0.01 + 6.364e-03)/3.722e+05
plot(est~mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7, 2.7e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999, 0.088750667)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7, 2.7e-7, 1.7e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999, 0.088750667, 0.035870666)
plot(est ~ mu)
lm(est ~ mu)
fit1 = lm(est ~ mu)
coef(fit1)
(0.1 - coef(fit1)[1])/coef(fit1)[2]
(0.01 - coef(fit1)[1])/coef(fit1)[2]
d = read.csv(file,choose())
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
setwd("C:/Users/msamant/Downloads")
write.table(d, "Data.csv")
write.table(d, "Data1.csv")
hist(d$pdelta_est)
hist(as.numeric(d$pdelta_est))
hist(as.numeric(d$pdelta_est), breaks = 20)
setwd("~/GitHub/Va_simulations/RESULTS and ANALYSES/No_burnin/Scale_0.033")
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_Id", d$Set_ID, invert=TRUE),]
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d = d[grep("Set_Id", d$Set_ID, invert=TRUE),]
View(d)
View(d)
library(ggplot2)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_f = d[d$bdelta_method=="fixed",]
d_e = d[d$bdelta_method=="estimate",]
d_f_std = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$n_cages=="10"&d_f$r_expt==1.4e-06,]
p_f_std = ggplot(d_f_std, aes(y = vA_est, x = vA_true))
p_f_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_e_std = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_std = ggplot(d_e_std, aes(y = vA_est, x = vA_true))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_f = d[d$bdelta_method=="fixed",]
d_e = d[d$bdelta_method=="estimate",]
d_f_std = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$n_cages=="10"&d_f$r_expt==1.4e-06,]
p_f_std = ggplot(d_f_std, aes(y = vA_est, x = vA_true))
p_f_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_e_std = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_std = ggplot(d_e_std, aes(y = vA_est, x = vA_true))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_f_r = d_f[d_f$ngen_expt=="3"&d_f$n_ind_exp=="1000"&d_f$n_cages=="10",]
d_e_r = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10",]
p_e_r = ggplot(d_e_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_e_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d_e_r = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10",]
p_e_r = ggplot(d_e_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_e_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
library(ggplot2)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_f = d[d$bdelta_method=="fixed",]
d_e = d[d$bdelta_method=="estimate",]
d_e_std = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_std = ggplot(d_e_std, aes(y = vA_est, x = vA_true))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_e_r = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10",]
p_e_r = ggplot(d_e_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_e_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_ind = d_e[d_e$ngen_expt=="3"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_ind = ggplot(d_e_ind, aes(y = vA_est, x = vA_true, color = n_ind_exp))
p_e_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_cage = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$r_expt==1.4e-06,]
p_e_cage = ggplot(d_e_cage, aes(y = vA_est, x = vA_true, color = n_cages))
p_e_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_e_gen = d_e[d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_gen = ggplot(d_e_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_e_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
library(ggplot2)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_indxp = factor(d$n_indxp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_std = d[d$ngen_expt=="3"&d$n_indxp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
library(ggplot2)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_std = d[d$ngen_expt=="3"&d$n_indxp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_std = ggplot(d_std, aes(y = vA_est, x = vA_true))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
library(ggplot2)
d = read.csv("c_Output/Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_std = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_std = ggplot(d_std, aes(y = vA_est, x = vA_true))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_r = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10",]
p_r = ggplot(d_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_ind = d[d$ngen_expt=="3"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_ind = ggplot(d_ind, aes(y = vA_est, x = vA_true, color = n_indxp))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_ind = ggplot(d_ind, aes(y = vA_est, x = vA_true, color = n_ind_exp))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_cage = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$r_expt==1.4e-06,]
p_cage = ggplot(d_cage, aes(y = vA_est, x = vA_true, color = n_cages))
p_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_std = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_std = ggplot(d_std, aes(y = vA_est, x = vA_true))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
plot(d_std$vA_left ~ d_std$vA_true)
abline(0,1)
dim(d_std)
dim(d_ind)
dim(d_r)
dim(d_cage)
dim(d_gen)
d_gen = d[d$n_ind_xp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_gen = ggplot(d_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_gen = d[d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_gen = ggplot(d_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
dim(d_gen)
View(d_std)
d_std$mu
d$mu = as.numeric(d$mu)
d_std$mu
order(d_std$mu)
d_std$mu(order(d_std$mu))
d_std$mu[order(d_std$mu)]
d_std = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
d_std$mu[order(d_std$mu)]
mean(4.202020e-09, 4.545455e-09)
mean(c(4.202020e-09, 4.545455e-09))
dim(d_cage)
dim(d_cage[d_cage$n_cages=="5",])
dim(d_cage[d_cage$n_cages=="3",])
dim(d_cage[d_cage$n_cages=="10",])
d_cage5 = d_cage[d_cage$n_cages=="5",]
dim(d_cage5)
d_cage5$mu[order(d_cage$mu)]
d_cage5$mu[order(d_cage5$mu)]
d_cage = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$r_expt==1.4e-06,]
d_cage5 = d_cage[d_cage$n_cages=="5",]
d_cage5$mu[order(d_cage$mu)]
d_cage5$mu[order(d_cage5$mu)]
mean(c(1.828283e-08, 1.862626e-08))
dim(d_gen)
d_gen = d[d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
dim(d_gen[d_gen$ngen_expt=="1",])
dim(d_gen[d_gen$ngen_expt=="3",])
dim(d_gen[d_gen$ngen_expt=="5",])
dgen1 = (d_gen[d_gen$ngen_expt=="5",])
d_gen1$mu[order(d_gen1$mu)]
dgen1$mu[order(dgen1$mu)]
a = dgen1$mu[order(dgen1$mu)]
a1 = a[2:(length(a))]
a2 = a[1:(length(a) - 1)]
plot(a2-a1)
which(a2-a2 < -2.5e-10)
which((a2-a1) < -2.5e-10)
a[26]
a[27]
a[28]
a[29]
mean(c(7.464646e-09, 7.808081e-09))
library(ggplot2)
d = read.csv("Data_no_burnin.csv", header=T)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
d$vA_est = as.numeric(d$vA_est)
d$vA_true = as.numeric(d$vA_true)
d$vA_left = as.numeric(d$vA_true)
d$pdelta_est = as.numeric(d$pdelta_est)
d$bdelta_intercept_est = as.numeric(d$bdelta_intercept_est)
d$bdelta_slope_est = as.numeric(d$bdelta_slope_est)
d$r_expt = as.numeric(d$r_expt)
d$sequence_length = as.numeric(d$sequence_length)
d$mu = as.numeric(d$mu)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_std = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_std = ggplot(d_std, aes(y = vA_est, x = vA_true))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
d_r = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$n_cages=="10",]
p_r = ggplot(d_r, aes(y = vA_est, x = vA_true, color = as.character(r_expt*sequence_length)))
p_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_ind = d[d$ngen_expt=="3"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_ind = ggplot(d_ind, aes(y = vA_est, x = vA_true, color = n_ind_exp))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_cage = d[d$ngen_expt=="3"&d$n_ind_exp=="1000"&d$r_expt==1.4e-06,]
p_cage = ggplot(d_cage, aes(y = vA_est, x = vA_true, color = n_cages))
p_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
d_gen = d[d$n_ind_exp=="1000"&d$n_cages=="10"&d$r_expt==1.4e-06,]
p_gen = ggplot(d_gen, aes(y = vA_est, x = vA_true, color = ngen_expt))
p_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
dim(d)
p_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_gen + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Generations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15)) + scale_color_manual(values = c("#009E73"))
p_std + theme_bw() + geom_point(aes(color="#009E73")) + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15)) + scale_color_manual(values = c("#009E73"))
p_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
1.4e-6/532
1e-6/532
p_cage + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Replicate populations") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_ind + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Population size") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
p_r + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw", color = "Map length (M)") + scale_color_manual(values = c("#0072B2", "#999999", "#009E73")) + theme(text = element_text(size = 15))
