VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
svdC = svd(C0)
svdC$u
svdC$v
svdC$d
U
svdC$u
D
svdC$d
svdC$u
U
C0 = matrix(rnorm(25),5, 5)
ncol_A = ncol(C0)
nrow_A = nrow(C0)
D = matrix(0,nrow=min(ncol_A,nrow_A), ncol=1)
U = matrix(0,nrow_A,nrow_A)
VT = matrix(0, ncol_A,ncol_A)
bigalgebra::dgesdd(JOBZ = "A", A = C0, S = D, U = U, VT = VT)
U
VT
D
svdC = svd(C0)
svdC$u
U
D
svdC$d
?svd
??mat.mult
?matrix
?Matrix::Matrix
load("C:/Academics/Post-doc/Va_simulations/5_History_sim/c_Output/Output_temp.RData")
library(Matrix)
dim(L)
L = cov(c_ind)
dim(L)
object.size(L)/1e+09
L1 - Matrix(L, sparse = TRUE)
L1 = Matrix(L, sparse = TRUE)
object.size(L1)/1e+09
t(list_alpha)%*%L%*%list_alpha
t(list_alpha)%*%L1%*%list_alpha
t(list_alpha)%*%L%*%list_alpha
t(list_alpha)%*%L1%*%list_alpha
dim(NRF)
sum(NRF!=0)
252237924/(15882^2)
NRF[1,10000]
NRF[1,1]
NRF[1,2]
L[1,2]
L[1,2000]
L[1,10000]
d = read.csv()
d = read.csv(file.choose(), header=T)
unique(d$Trait)
unique(d$Family)
order(unique(d$Family))
length(unique(d$Family))
which(d$Family==200)
which(d$Family==48)
which(d$Family==1)
which(d$Family==47)
d$Trait[which(d$Family==47)]
d$Trait[which(d$Family>43)]
d$Trait[which(d$Family==0)]
d$Trait[which(d$Family==202)]
d$Trait[which(d$Family==202)]
which(d$Family==202)]
which(d$Family==202)
which(d$Family==0)
which(d$Family==0|d$Family>43)
which(d$Family==0|d$Family>43) + 1
vA_true = c(0.01129211, 0.01906948, 0.03519948, 0.03921755, 0.03812806, 0.06097343)
vA_est = c(0.001420423, 0.010398161, 0.020220730, 0.016588259, 0.023837300, 0.045073819)
plot(vA_est~vA_true)
abline(0,1)
load("C:/Academics/Post-doc/Va_simulations/5_History_sim/c_Output/Output_temp.RData")
dim(L)
dim(c_ind)
ret = sample(1:ncol(c_ind), 5000)
ret[1:4]
c_ind = c_ind[, ret]
dim(c_ind)
list_alpha = list_alpha[ret]
L = cov(c_ind/2)
vA = t(list_alpha)%*%L%*%list_alpha
vA
fem_loci = sample(1:5000, 2500)
a = rep(0, 5000)
a[500]
a[fem_loci] = 1
a
a_fem = a
a_male = ifelse(a==1, 0, 1)
plot(a_male~a_fem)
list_alpha_male = list_alpha*a_male
list_alpha_fem = list_alpha*a_fem
vA_male = t(list_alpha_male)%*%L%*%list_alpha_male
vA_fem = t(list_alpha_fem)%*%L%*%list_alpha_fem
vA_male
vA_fem
cov_mf = t(list_alpha_male)%*%L%*%list_alpha_fem
cov_mf
cov_mf/sqrt(vA_male*vA_fem)
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = c(1.4, 0.14, 0.014, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4)
param_matrix
param_matrix[,2] = rep(1000, 9)
param_matrix
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1,4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1.4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix
param_matrix = rbind(param_matrix, param_matrix)
param_matrix
bdelta = c(rep("fixed", 9), rep("estimate", 9))
bdelta
pmatrix = cbind(bdelta, pmatrix)
pmatrix = cbind(bdelta, param_matrix)
param_matrix = cbind(bdelta, param_matrix)
param_matrix
param_matrix = matrix(NA, nrow = 9, ncol  = 4)
param_matrix[,1] = rep(1.4, 9)
param_matrix[2,1] = 0.14
param_matrix[3,1] = 0.014
param_matrix[,2] = rep(1000, 9)
param_matrix[4,2] = 500
param_matrix[5,2] = 100
param_matrix[,3] = rep(10, 9)
param_matrix[6,3] = 5
param_matrix[7,3] = 3
param_matrix[,4] = rep(9, 3)
param_matrix[8,4] = 1
param_matrix[9,4] = 5
param_matrix = rbind(param_matrix, param_matrix)
param_matrix = cbind(c(rep("fixed", 9), rep("estimate", 9)), param_matrix)
param_matrix
?save
getwd()
write.table(param_matrix, file = "param.txt", sep = " ")
write.table(param_matrix, file = "param.txt", sep = " ", col.names = FALSE, row.names = FALSE)
d = read.csv(file.choose(), header=T)
head(d)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
hist(d$pdelta_est)
hist(d$pdelta_est, breaks = 50)
a = c(1,2,3,4)
a
collapse(a)
paste(a[1], a[2], a[3], sep = "_")
### Base path and path to Vw.Rmd (file containing Jarrod's functions) (depending on the system) ###
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/Va_simulations/5_History_sim"
Vw_path = "/ceph/users/marun/Va_simulations/6_Code_Test/Vw.Rmd"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/5_History_sim" ## ON VERA
Vw_path = "/data/home/msamant/Manas/Va_simulations/Github/Va_simulations/6_Code_Test/Vw.Rmd"  ### Jarrod's functions and other code is stored here
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local Wsl
Vw_path = "/mnt/c/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}else{
base_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/5_History_sim" ## Local windows
Vw_path = "C:/Users/msamant/Documents/GitHub/Va_simulations/6_Code_test/Vw.Rmd" ### Jarrod's functions and other code is stored here
}
}
}
# Paths to various scripts that are used for running the simulations and extracting information from SLiM outputs
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_History.slim")                                                    ## SLiM script running the history
msprime_add_neutral_path = file.path(base_path, "1_History_add_neutral_mut.py")                               ## msprime script that adds neutral mutations to the tree sequence generated by 1_History.slim
slim_expt_path = file.path(base_path, "4_Experiment.slim")                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
# Paths to various temporary directories
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
###################################
###### Create file structure ######
###################################
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
#system(paste("rm -rf", paste(base_path, "/b_Interim_files/*", sep = ""))) # Remove the contents of this directory
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
##### Create a spreadsheet to store cumulative data across all simulations (only if it doesn't exist already)
# Assign a "Set_ID" to each set of simulations
# The set ID is the name of the system + time at which this script starts running. It stays constant throughout (for all the simulations run in that particular set).
Set_ID = as.character(paste(Sys.info()["nodename"], Sys.time()))
Set_ID = gsub(" ", "_", Set_ID)
Set_ID = paste(Set_ID, commandArgs(trailingOnly = TRUE)[1], commandArgs(trailingOnly = TRUE)[2], commandArgs(trailingOnly = TRUE)[3], commandArgs(trailingOnly = TRUE)[4], commandArgs(trailingOnly = TRUE)[5], sep = "_")
paste("rm ", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = ""
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
sim = 1
paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep ="")), sep = " "
paste("rm", paste(c_matrix_path,  "/", Set_ID, "_sim", sim, "_c_matrix_parents.csv", sep =""), sep = " ")
if(Sys.info()["nodename"]=="bigshot"){
base_path = "/ceph/users/marun/"
}else{
if(Sys.info()["nodename"]=="vera.bio.ed.ac.uk"){
base_path = "/data/home/msamant/Manas/Sex_specific_sel" ## ON VERA
}else{
if(Sys.info()["sysname"]=="Linux"){
base_path = "/mnt/c/Academics/Post-doc/Sex_specific_sel" ## Local Wsl
}else{
base_path = "C:/Academics/Post-doc/Sex_specific_sel" ## Local windows
}
}
}
base_path
msprime_burnin_path = file.path(base_path, "0_neutral_burnin.py")                                             ## msprime script generating the initial sequences
slim_history_path = file.path(base_path, "1_FWD_sim.slim")                                                    ## SLiM script running the history                                                    ## SLiM script running the experiment
extract_genomes_path = file.path(base_path, "3_Extract_genomes.py")                                           ## Python script extracting mutations and genomes from the SLiM output file
extract_mut_path = file.path(base_path, "2_Extract_mutations.py")                                             ## Python script extracting mutations from the SliM output file
slim_output_path = paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")                                ## Path where SLiM and msprime output files are stored
mutations_path = paste(base_path, "/b_Interim_files/Mutations", sep = "")                                     ## Path for text file containing mutations generated by the python script
c_matrix_path = paste(base_path, "/b_Interim_files/C_matrices", sep = "")                                     ## .csv file storing c matrix generated by the python script
output_path = paste(base_path, "/c_Output", sep = "")
##### Create directory that stores outputs
system(paste("mkdir -p", output_path)) # Make directory but ignore if already present
##### Create directory that stores temp files and directories therein
system(paste("mkdir -p", paste(base_path, "/b_Interim_files", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/C_matrices", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/Mutations", sep = "")))
system(paste("mkdir -p", paste(base_path, "/b_Interim_files/SLiM_outputs", sep = "")))
d = read.csv(file.choose())
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.11), ylim = c(0.005, 0.11))
abline(0,1)
d = read.csv(file.choose(), header=T)
d = read.csv(file.choose(), header=T)
head(d)
library(ggplot2)
p = ggplot(d, aes(y = rmf, x = year))
p + theme_bw() + geom_point()
p = ggplot(d, aes(y = rmf, x = Year))
p + theme_bw() + geom_point()
p + theme_bw() + geom_point() + geom_smooth()
p + theme_bw() + geom_point() + geom_smooth(method = lm)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p = ggplot(d, aes(y = rmf, x = Year, label = Study))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=-2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=-0.2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0.2, vjust=0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_text(hjust=0.2, vjust=0.2)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication")
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text()
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.9)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.0)
d = read.csv(file.choose())
p = ggplot(d, aes(y = rmf, x = Year, label = Study))
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.0)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = 0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.1, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.03, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.01, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.005, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.001, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = -0.000, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text(hjust = 0, vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text( vjust = -0.5)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + geom_label_repel(aes(label = Name),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_label_repel(aes(label = Study)
)
p + theme_bw() + geom_point() + geom_smooth(method = lm) + labs(y = "Intersexual genetic correlation for fitness", x = "Year of publication") + theme(text = element_text(size = 15)) + geom_text( vjust = -0.5)
d = read.csv(file.choose(), header=d)
d = read.csv(file.choose(), header=T)
plot(d$vA_est ~d$vA_true, xlim = c(0.0, 0.11), ylim = c(0.0, 0.11))
abline(0,1)
d = read.csv(file.choose(), header=T)
plot(d$vA_est ~ d$vA_true, xlim = c(0, 0.11), y = c(0, 0.11))
d
d$vA_true
d$vA_est
plot(d$vA_est ~ d$vA_true, xlim = c(0, 0.11), y = c(0, 0.11))
length(d$vA_est)
length(d$vA_true)
plot(d$vA_est ~ d$vA_true)
plot(d$vA_est ~ d$vA_true, xlim = c(0.005, 0.1))
abline(0,1)
d = read.csv(file.choose())
View(d)
?grep
grep("Set_ID", d[,1])
grep("Set_ID", d[,1], invert = TRUE)
d1 = d[grep("Set_ID", d[,1], invert = TRUE),]
d1
View(d1)
d1 = d1[order(d1$mu),]
View(d1)
plot(d1$vA_est ~ d1$vA_true)
abline(0,1)
View(d1)
dim(d1)
d1[1,2]
typeof(d1$mu_msp)
d1$mu_msp = as.numeric(d1$mu_msp)
d1 = d1[order(d1$mu),]
View(d1)
typeof(d1$mu_msp)
typeof(d1$mu)
d1$mu = as.numeric(d1$mu)
d1 = d1[order(d1$mu),]
View(d1)
d = read.csv(file.choose())
View(d)
grep("Set_ID", d$Set_ID, invert = TRUE)
d1 = d[grep("Set_ID", d$Set_ID, invert = TRUE),]
d1
View(d1)
plot(d1$vA_est ~ d1$vA_true)
abline(0,1)
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.11), ylim=c(0.005, 0.11))
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.105), ylim=c(0.005, 0.105))
abline(0,1)
plot(d1$vA_est ~ d1$vA_true, xlim=c(0.005, 0.105), ylim=c(0.005, 0.105), xlab = "True value of Vw", ylab = "Estimate of Vw")
abline(0,1)
a = c(0, 0.01, 0.0001, 0, 1, 0.999, 0.5, 1)
which(0<a<1)
which(a<1)
which(a<1&a>0)
mu = c(5e-8, 1e-7, 3e-7)
est = c(0.007498391, 0.036789558, 0.104107755)
lm(est~mu)
(0.01 + 6.364e-03)/3.722e+05
plot(est~mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7, 2.7e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999, 0.088750667)
plot(est ~ mu)
mu = c(5e-8, 1e-7, 3e-7, 4.4e-8, 3.5e-8, 1.5e-7, 2.5e-7, 2e-7, 2.7e-7, 1.7e-7)
est = c(0.007498391, 0.036789558, 0.104107755, 0.019314166, 0.005005925, 0.035513761, 0.064503828, 0.03091999, 0.088750667, 0.035870666)
plot(est ~ mu)
lm(est ~ mu)
fit1 = lm(est ~ mu)
coef(fit1)
(0.1 - coef(fit1)[1])/coef(fit1)[2]
(0.01 - coef(fit1)[1])/coef(fit1)[2]
d = read.csv(file.choose(), header=T)
View(d)
d = d[grep("Set_ID", d$Set_ID, invert=TRUE),]
View(d)
plot(d$vA_est ~ d£vA_true)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
hist(d$pdelta_est)
hist(as.numeric(d$pdelta_est))
hist(as.numeric(d$pdelta_est), breaks = 50)
1.33e6/2500
1.33e+6/2500
range(d$mu_msp)
range(d$mu)
range(d$vA_est)
range(d$vA_true)
View(d)
range(as.numeric(d$vA_true))
range(as.numeric(d$mu_msp))
range(as.numeric(d$mu_msp))*532
View(d)
plot(d$vA_est ~ d$vA_true)
abline(0, 1)
d = read.csv(file.choose)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
d
dim(d)
plot(d$mu_msp)
plot(order(d$mu_msp))
plot(order(as.numeric(d$mu_msp)))
plot(sort(as.numeric(d$mu_msp)))
plot(d$vA_est ~ d$vA_true)
abline(0, 1)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$vA_est ~ d$vA_true)
abline(0,1)
View(d)
hist(bdelta_intercept_est)
hist(d$bdelta_intercept_est)
hist(as.numeric(d$bdelta_intercept_est))
hist(as.numeric(d$bdelta_slope_est))
hist(as.numeric(d$pelta_est))
hist(as.numeric(d$pelta_est))
hist(as.numeric(d$pelta_est), breaks = 50)
range(as.numeric(d$pelta_est))
d$pelta_est
hist(as.numeric(d$pdelta_est), breaks = 50)
hist(as.numeric(d$pdelta_est), breaks = 20)
fit1 = lm(d$vA_true ~ d$mu)
(0.1 - coef(fit1)[1])/coef(fit1)[2]
summary(fit1)
fit1 = lm(d$vA_true ~ as.numeric(d$mu))
summary(fit1)
(0.1 - coef(fit1)[1])/coef(fit1)[2]
(0.01 - coef(fit1)[1])/coef(fit1)[2]
plot(d$vA_est ~ d$vA_true)
abline(0,1)
setwd("~/GitHub/Va_simulations/RESULTS and ANALYSES/No_burnin")
setwd("~/GitHub/Va_simulations/RESULTS and ANALYSES/No_burnin")
library(ggplot2)
d = read.csv("Data_no_burnin.csv", header=T)
d$n_cages = factor(d$n_cages, levels = c("3", "5", "10"))
d$n_ind_exp = factor(d$n_ind_exp, levels = c("100", "500", "1000"))
d$ngen_expt = factor(d$ngen_expt, levels = c("1", "3", "5"))
d_f = d[d$bdelta_method=="fixed",]
d_e = d[d$bdelta_method=="estimate",]
d_e_std = d_e[d_e$ngen_expt=="3"&d_e$n_ind_exp=="1000"&d_e$n_cages=="10"&d_e$r_expt==1.4e-06,]
p_e_std = ggplot(d_e_std, aes(y = vA_est, x = vA_true))
p_e_std + theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1) + labs(x = "True Vw", y = "Estimate of Vw") + theme(text = element_text(size = 15))
View(d)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
dim(d)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
fit1 = lm(d$vA_true ~ d$mu)
fit1 = lm(d$vA_true ~ as.numeric(d$mu))
(0.1 - coef(fit1)[1])/coef(fit1)[2]
(0.01 - coef(fit1)[1])/coef(fit1)[2]
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$vA_est ~ d$vA_true)
View(d)
range(as.numeric(d$mu))
d = read.csv(file.choose)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$va_lost ~ d$vA_true)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$va_lost ~ d$vA_true)
plot(d$vA_est ~ d$vA_true)
abline(0,1)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$vA_est ~ d$vA_true)
abline(0,1)
range(d$vA_est)
range(d$vA_true)
range(d$mu)
range(as.numeric(d$mu))
fit1 = lm(d$vA_true ~ as.numeric(d$mu))
(0.1 - coef(fit1)[1])/coef(fit1)[2]
(0.01 - coef(fit1)[1])/coef(fit1)[2]
hist(as.numeric(d$pdelta_est))
hist(as.numeric(d$pdelta_est), breaks = 20)
hist(as.numeric(d$bdelta_slope_est), breaks = 20)
d = read.csv(file.choose())
d = d[grep("Set_ID", d$Set_ID, invert=T),]
plot(d$vA_est~d$vA_true)
abline(0,1)
