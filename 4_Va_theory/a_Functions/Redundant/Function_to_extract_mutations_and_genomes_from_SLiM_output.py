#############################################################################
############ Details of the function ########################################
#############################################################################

## Requirements
# numpy

## Input variables:
# 1. The path of the text file containing the full output generated by the SLiM simulation
# 2. The path where the text file containing mutations is to be stored
# 3. The path where the text file containing all genomes is to be stored
# 4. The path where the .csv file containing the c matrix is to be stored
# 5. Size of the random sample to  be drawn from the population

## What does the function do?
# Reads the full output generated by the SLiM simulation
# Identifies the positions of the section of the full SLiM output containing the details of segregating mutations in the population.
# Saves the details of segregating mutations in a new text file.
# Identifies the positions of the section of the full SLiM output containing genomes. Stores the genomes as a text file.
# Edits text and retains only the IDs of mutations contained in that genome. Coverts strings into integers, and stores the genomes as a list of lists of mutations they contain.
# Draws a random sample of individuals 
# Builds a c matrix of genomes for the sample, whose rows are sampled genomes and columns are sites. If a mutation is present in a genome, the corresponding element of the c matrix is 1, otherwise it is 0.
# Stores the c matrix as a .csv file


## Output
# 1. A text file of all mutations and their information ("mutations.txt")
# 2. A text file of all genomes containing lists of their mutations ("all_genomes.txt")
# 3. A csv file containing the c matrix for genomes ("c_matrix.csv"). Note that the genomes in the SLiM output are such that genomes 2*i and 2*i - 1 belong to individual i

## Currently only works for autosomes


import numpy as np

#slim_output_path = "b_Interim_files/SLiM_Outputs/Output_101000.txt"
#mutations_path = "b_Interim_files/Mutations/mutations.txt"
#all_genomes_path = "b_Interim_files/Genomes/all_genomes.txt"
#c_matrix_path = "b_Interim_files/C_Matrices/c_matrix.csv"
#sample_size=100

def extract_mutations_genomes(slim_output_path = "b_Interim_files/SLiM_Outputs/Output_101000.txt", mutations_path = "b_Interim_files/Mutations/mutations.txt", all_genomes_path = "b_Interim_files/Genomes/all_genomes.txt", c_matrix_path = "b_Interim_files/C_Matrices/c_matrix.csv", sample_size = 100):
    
    
    #### Picking out mutations
    # Create an empty file to write the mutations in
    f_mutation = open(mutations_path, "w")

    # Create dicts that will be filled with line numbers and the corresponding text on those lines
    dict_1m = {}
    dict_2m = {}

    for i_m, line_m in enumerate(open(slim_output_path)):
        dict_1m[line_m.rstrip()] = i_m
        dict_2m[i_m] = line_m

    # Identify start and end points of the section showing mutations
    start_m = dict_1m["Mutations:"]
    end_m = dict_1m["Individuals:"]

    n_mutations = 0

    # Write headers 
    f_mutation.write("Temp_ID Permanent_ID Mutation_type Position s h Subpop Tick Number\n")
    for j_m in range(start_m + 1,end_m):
       f_mutation.write(dict_2m[j_m])
       n_mutations = n_mutations + 1

    f_mutation.close()



    #### Picking out genomes     
    # Create an empty file to write the genomes in
    f_genomes = open(all_genomes_path, "w")

    # Create an empty list to store genomes. Later this list will be edited to remove unnecessary text and only have the list of mutations for each genome.
    genome_list = []

    dict_1g = {}
    dict_2g = {}

    for i_g, line_g in enumerate(open(slim_output_path)):
        dict_1g[line_g.rstrip()] = i_g
        dict_2g[i_g] = line_g

    # Identify start point of the section showing genomes. The end point is the end of the file
    start_g = dict_1g["Genomes:"]


    n_genomes = 0
    for j_g in range(start_g + 1,len(dict_1g)):
       f_genomes.write(dict_2g[j_g])
       
       # add all the genomes to genome_list
       genome_list.append(dict_2g[j_g])
       n_genomes = n_genomes + 1
       
            

    f_genomes.close()



    #strip the unnecessary parts from elements of genome_list, and convert strings to int
    for genome in range(0,len(genome_list)):
        genome_list[genome] = genome_list[genome][genome_list[genome].find("A")+2:].rstrip().split(" ")
        # Convert the mutations in each genome into integers (currently they are strings)
        for mutation in range(0, len(genome_list[genome])):
            genome_list[genome][mutation] = int(genome_list[genome][mutation])

    #print(genome_list[19999])

    ### So far, each element of genome_list contains the list of Temp_IDs of all the mutatations carried by each genome in the population


    # c_matrices for entire populations take large amounts of storage space
    # Since, ultimately, we need to work with samples, storing a sample of randomly chosen individuals from the population is useful

    # Randomly sample individuals (sample size is a parameter of the function)
    # In genome_list genomes are arranged such that genome 0 and genome 1 belong to individual 1, and so on.
    # Two consecutive genomes belong to the same individual

    # Create an empty list for sampled genomes

    genome_list_sample = []


    import random
    # no. of individuals is 0.5 * number of genomes
    sample_ids = random.sample(range(0, int(len(genome_list)), 2), sample_size)

    for sample in sample_ids:
        genome_list_sample.append(genome_list[sample])
        genome_list_sample.append(genome_list[sample+1])
        


    # Create an empty matrix having dimensions n_individuals*n_genomes to create the "c" matrix
    c = np.zeros((len(genome_list_sample),n_mutations))


    # Read a and fill c
    genome = 0

    for genome in range(0,len(genome_list_sample)):
        
        #print(genome)
        for mutation in genome_list_sample[genome]:
            c[genome][mutation] = 1

    #Write the c matrix to a file
    import numpy

    c_1 = numpy.asarray(c)


    numpy.savetxt(c_matrix_path, c_1, delimiter = ",")

    #print(n_mutations)
    #print(n_genomes)



