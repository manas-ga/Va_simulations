initialize()
{
	initializeSLiMModelType("WF");
	initializeTreeSeq();
	initializeMutationRate(0);
	
	if (DFE == "g"){
		initializeMutationType("m1", 0.5, "f", 0.0);
		initializeMutationType("m2", 0.5, "g", -shape*scale, shape);
		initializeMutationType("m3", 0.5, "g", shape*scale, shape);
		initializeGenomicElementType("g1", c(m1, m2, m3), c(0.33, 1.0, mut_ratio));
	}
	
	if (DFE == "n"){
		initializeMutationType("m1", 0.5, "f", 0.0);
		initializeMutationType("m2", 0.5, "n", mean_alpha, var_alpha);
		initializeGenomicElementType("g1", c(m1, m2), c(0.33, 1.0));
	}
	
	initializeGenomicElement(g1, 0, sequence_length-1);
	initializeRecombinationRate(0);
 
}



1 late(){
	sim.readFromPopulationFile(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees");
	sim.treeSeqRememberIndividuals(p0.individuals);
	
	// The .trees output "forgets" changes to selection coefficients by default
	// These can be recorded by creating a dectionary of slim_IDs and selection coefficients
	// This dictionary can then be passed to sim.treeSeqOutput() as metadata
	// This metadata dictionary can be recovered from the saved file using the treeSeqMetadata() function.
	
	sel_coef = Dictionary();		

	if(flip_sel_coef==1){
		
		muts = sim.mutations;
		for(mut in muts){
			mut.setSelectionCoeff(sample(c(-1,1), 1)*mut.selectionCoeff);
			// Populate the dictionary of metadata
			sel_coef.setValue(asString(mut.id), mut.selectionCoeff);
		}
		catn("Flipped selection coefficients at randomly selected sites...");
	}
	
	sim.treeSeqOutput(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees", metadata = sel_coef);
	sim.outputFull(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_parents.txt");
	catn("Generation " + sim.cycle + ": parents' output saved as a .trees file and as a .txt file"); // Saving a .txt output in the parents' generation is essential for downstream analyses

}




