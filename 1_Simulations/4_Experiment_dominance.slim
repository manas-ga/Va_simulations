initialize()
{
	initializeSLiMModelType("WF");
	initializeTreeSeq();
	
	// Set default parameters if running on SLiMgui
	if (exists("slimgui")){
		defineConstant("DFE", "g");
		defineConstant("mu_expt", 0);
		defineConstant("shape", 0.3);
		defineConstant("scale", 0.033);
		defineConstant("mut_ratio", 0);
		defineConstant("sequence_length", 1e+6);
		defineConstant("r", 1e-7);
		defineConstant("msprime_output_path", "C:/Users/msamant/Documents/GitHub/Va_simulations/1_Simulations/b_Interim_files/SLiM_outputs");
		defineConstant("slim_output_path", "C:/Users/msamant/Documents/GitHub/Va_simulations/1_Simulations/b_Interim_files/SLiM_outputs");
		defineConstant("Set_ID", "Set_21c_SCE-BIO-C06645_2025-07-14_11-20-13.251733");
		defineConstant("simulation", 1);
		defineConstant("end_gen", 2);
		defineConstant("ngen1", 1);
		defineConstant("ngen2", 4);
		defineConstant("cage", 1);
		defineConstant("n_ind_exp", 1000);
		defineConstant("Ve_w_expt", 1);
		defineConstant("output_freq", 500);
		defineConstant("use_dominance", 0);
		defineConstant("k", 0); // Dominance coefficient; heterozygote phenotype = (1 + k)eta/2 where eta = 2*s; d = k*eta
		defineConstant("flip_sel_coef", 0);
		
	}
	setSeed(seed^cage + cage^2);
	initializeMutationRate(mu_expt);
	
	if (DFE == "g"){
		initializeMutationType("m1", 0.5, "f", 0.0);
		initializeMutationType("m2", 0.5, "g", -shape*scale, shape);
		initializeMutationType("m3", 0.5, "g", shape*scale, shape);
		initializeGenomicElementType("g1", c(m1, m2, m3), c(0.33, 1.0, mut_ratio));
	}
	
	if (DFE == "n"){
		initializeMutationType("m1", 0.5, "f", 0.0);
		initializeMutationType("m2", 0.5, "n", mean_alpha, var_alpha);
		initializeGenomicElementType("g1", c(m1, m2), c(0.33, 1.0));
	}
	
	initializeGenomicElement(g1, 0, sequence_length-1);
	initializeRecombinationRate(r);

}

mutationEffect(m2) { return 1.0; }  // Ensures no selection by default, unless fitness effects are specified manually
mutationEffect(m3) { return 1.0; }


1 late(){
	
	// Read from the "..._output_history.trees" file
	
	sim.readFromPopulationFile(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees");
	
	sim.treeSeqRememberIndividuals(p0.individuals);
	catn(sim.cycle + " (parents' generation)");
	
	// if(flip_sel_coef==1) load metadata to load the changes in selection coefficients made manualy in 1_History.slim
	// These changes are not recorded automatically in the .trees file
	// Must be retrieved from the user generated metadata Dictionary() 
	
	if(flip_sel_coef==1){
		
		sel_coef = treeSeqMetadata(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees");
		
		// Apply these changed selection coefficients
		
		muts = sim.mutations;
		
		for (mut in muts){
			
			mut.setSelectionCoeff(sel_coef.getValue(asString(mut.id)));
		}
	}
}


1:150000 late() { //15000 is just a random large number that is higher than all the generations of interest
	
	
	// Experiment (and therefore selection) starts from end_gen + ngen1 + 1
	
	if (sim.cycle>=(end_gen+ngen1)){ // Since this is a late() event, its effects will only be applied *after* progeny production in end_gen + 1 (hence no selection in end_gen + 1 to end_gen + ngen1 generations)
		// But selection will be applied according to fitnesses defined below starting from gen (end_gen + gen1 + 1) 
		
		inds = sim.subpopulations.individuals; // Vector of all individuals
		
		if(use_dominance == 1){
		catn("k = " + k);
			
			for (ind in inds){
				
				g1_m = ind.genome1.mutations;
				g2_m = ind.genome2.mutations;
				
				hom = setIntersection(g1_m, g2_m);
				het = setSymmetricDifference(g1_m, g2_m);
				
				// We want deleterious (beneficial) alleles to be recessive (dominance)
				// k must be positive (negative) when selectionCoeff is positive (negative). Immaterial what happens when selectionCoeff = 0
				// create a vector of 1s and -1s
				
				sign = ifelse(het.selectionCoeff>0, 1, -1);
				
				phenotype = 0.0;
				if (size(hom)){
					phenotype = sum(hom.selectionCoeff * 2.0);
				}
				if (size(het)){
					phenotype = phenotype + sum(het.selectionCoeff * (1 + sign*k));
				}
				ind.tagF = phenotype;
			
			}
			
			phenotypes = inds.tagF;
		
		}
		
		if(use_dominance !=1){
			
			if(DFE == "g"){
				phenotypes = inds.sumOfMutationsOfType(m2) + inds.sumOfMutationsOfType(m3); // Sum of all the selection coefficients (both m2 and m3) in each individuals genomes
			}
			
			if (DFE == "n"){
				phenotypes = inds.sumOfMutationsOfType(m2); // Sum of all the selection coefficients (of type m2) in each individuals genomes
			}
		
		}
		
		phenotypes = phenotypes + rnorm(length(inds), 0, Ve_w_expt); // Add environmental noise
		inds.fitnessScaling = exp(phenotypes); // Calculate absolute fitness
	
	}
	
	sim.outputFull(slim_output_path + "/" + Set_ID + "_sim" + simulation + "_cage" + cage + "_output_experiment_" + sim.cycle + ".txt");
	
	if(sim.cycle > end_gen){
		catn(sim.cycle);
	}
	
	if(sim.cycle == (end_gen + ngen1)){
		catn("Experiment starts...");
	}
	
	// Stop the experiment (last generation)
	
	if (sim.cycle == (end_gen + ngen2)){
		catn("Experiment ends.");
		sim.simulationFinished();
	}
}
