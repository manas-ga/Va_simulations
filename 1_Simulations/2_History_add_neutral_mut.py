## Modified from: https://tskit.dev/pyslim/docs/stable/vignette_coalescent_diversity.html


######## Python script that uses msprime and pyslim to generate a add neutral mutations to the SLiM burnin simulation ########

import pyslim
import msprime
import numpy as np
import sys
import tskit

################# Command line arguments ####################

slim_output_path = sys.argv[1]
neutral_sites = float(sys.argv[2])
Set_ID = sys.argv[3]
sim = sys.argv[4]
seed = int(sys.argv[5])

#############################################################


# Read the tree sequency file generated by the nurnin SLiM simulation (i.e. "Output_history.trees")

ts = tskit.load(f"{slim_output_path}/{Set_ID}_sim{sim}_output_history.trees").simplify()

total_samples = len(ts.samples())
breakpoints = ts.breakpoints(as_array=True)

print("There are", ts.num_trees, "trees, associated with breakpoints", breakpoints)
print("There are", total_samples, "samples")
print("The length of the sequence is", ts.sequence_length)

# Calculate the total branch volume in the tree sequence
# Calculate the branch volume of each tree (tree.total_branch_length* tree.span) and sum

T_total_list = np.zeros(ts.num_trees)
span_list = np.zeros(ts.num_trees)

for index, tree in enumerate(ts.trees()):
    span_list[index] = tree.span
    T_total_list[index] = tree.total_branch_length

assert(sum(span_list) == ts.sequence_length)

Total_BV = sum(T_total_list*span_list)


# Calculate the mutation rate

mu_neutral = neutral_sites/Total_BV

print(f"The mutation rate to be used to add neutral mutations = {mu_neutral}")

####### Add mutations #######

# Specifies that these mutations are going to be drawn using the infinite alleles model and are going to be assigned type "m1" in SLiM

next_id = pyslim.next_slim_mutation_id(ts) # Makes the SLiM IDs of these mutations begin where they left off for the last selected mutation

neutral_mut_model = msprime.SLiMMutationModel(type=1, next_id=next_id)

ts = msprime.sim_mutations(ts, rate = float(mu_neutral), model = neutral_mut_model, keep = True, random_seed = seed) 

print(f"The tree sequence now has {ts.num_mutations} mutations, at "
      f"{ts.num_sites} distinct sites.")



###### Save ######


ts.dump(f"{slim_output_path}/{sys.argv[3]}_sim{sys.argv[4]}_output_history_with_neutral.trees")
