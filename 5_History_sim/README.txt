
# Va Simulations with SLiM history 


##  Description of scripts contained in this directory


### 00000_control.sh 

Bash script for gridengine on AC3 that allows running "00_Control_sim.R " with different command line arguments listed in "000_parameter_grid.txt"


### 00000_control_eddie.sh 

Bash script for gridengine on Eddie that allows running "00_Control_sim.R " with different command line arguments listed in "000_parameter_grid.txt"


### 000_parameter_grid.txt 

List of command line arguments to be fed to "00_Control_sim.R" using "00000_control.sh". One set of parameters per line. The parameters appear in the following order: mu, map_length_history, map_length_expt, n_ind_expt, n_cages, ngen_expt, flip_sel_coef, mut_ratio


### 00_History_sim_JARROD.R 

This is the main controlling R script that controls the other scripts and runs analyses. Now outdated, since simulations and analyses have now been separated and are to be controlled using separate scripts.

### 00_Control_sim.R

R script that controls runs various scripts that perform simulations. Stores output files generated by msprime and SLiM as well as .csv files containing simulation parameters.


### 0_neutral_burnin.py 

Uses "msprime" to simulates the ancestry of the population, simulate mutations and attach selection coefficients. Generates an output in the form of a .trees file that is stored in "b_interim_files/Msprime_outputs"


### 1_History.slim 

Reads the output generated by "0_neutral_burnin.py". Forward simulates the population (for a large number of generations) to simulate its history. Samples the parents that found the experimental population(s). Stores full SLiM outputs of the population at regular intervals in "b_interim_files/SLiM_outputs". Also stores the .trees file for the population at the end of the simulation.


### 1_History_add_neutral_mut.py 

Adds neutral mutations to the tree sequences generated at the end of "1_History.slim". 


### 1b_Change_sel_coef.slim 

In this SLiM script, we first read the .trees file generated after adding neutral mutations, i.e. slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees". We then randomly swap signs of selection coefficients *** if flip_sel_coef==T ***, and save two output files
1. a .txt file (slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_parents.txt") = This file is for downstream snalyses, it is not read by 4_Experiment.slim script
2. a .trees file (slim_output_path + "/" + Set_ID + "_sim" + simulation + "_output_history_with_neutral.trees", metadata = sel_coef)
By default the .trees file does not record changes to the selection coefficients. Therefore while saving the .trees file we also need to pass as metadata a dictionary containing the mutation ids and selection coeficients. All in just one tick. This script does not run the simulation forward. It's just a hack to read the .trees output, swap selection coefficients (if required), and then store the output as a .txt file.
The flip_sel_coef==T check happens within the script
Irrespective of whether flip_sel_coef==T, the script is run, minimally to convert the output from .trees to .txt
      
### 2_Extract_mutations.py 

A python script that reads a SLiM output file and extracts the information on mutations storing it as a .txt file in "b_interim_files/Mutations"

### 3_Extract_genomes.py 

A python script that reads a SLiM output file and extracts the information on mutations stooring it as a .txt file in "b_interim_files/Mutations". Also extracts the c matrix for genomes and stores it as a .csv file in "b_interim_files/C_Matrices"

### 4_Experiment.slim 

# A SLiM scri[t simulating the expeirment for 4 generations
# Reads the .trees output generated by 1_History.slim
# Generates a full output every generation which is stored in "b_interim_files/SLiM_outputs"


### Vw_sim_functions.R

Contains various R functions that extract useful data from SLiM outputs and run analyses.


### 5_Analysis_example_script.R 

A standalone script unrelated to the workflow described above. This script contains an example of how functions within Vw_sim_functions.R can be used to analyse data from one particular simulation.

### Parameters_info.txt

Contains notes on simulation parameters
